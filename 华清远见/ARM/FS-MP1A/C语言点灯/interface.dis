
interface.elf：     文件格式 elf32-littlearm


Disassembly of section .text:

c0008000 <_start>:
.text

	.global	_start
_start:
@ 异常向量表
	b reset
c0008000:	ea00000d 	b	c000803c <reset>
	ldr pc, _undefined_instruction
c0008004:	e59ff014 	ldr	pc, [pc, #20]	; c0008020 <_undefined_instruction>
	ldr pc, _software_interrupt
c0008008:	e59ff014 	ldr	pc, [pc, #20]	; c0008024 <_software_interrupt>
	ldr pc, _prefetch_abort
c000800c:	e59ff014 	ldr	pc, [pc, #20]	; c0008028 <_prefetch_abort>
	ldr pc, _data_abort
c0008010:	e59ff014 	ldr	pc, [pc, #20]	; c000802c <_data_abort>
	ldr pc, _not_used
c0008014:	e59ff014 	ldr	pc, [pc, #20]	; c0008030 <_not_used>
	ldr pc, _irq
c0008018:	e59ff014 	ldr	pc, [pc, #20]	; c0008034 <_irq>
	ldr pc, _fiq
c000801c:	e59ff014 	ldr	pc, [pc, #20]	; c0008038 <_fiq>

c0008020 <_undefined_instruction>:
c0008020:	c0008140 	andgt	r8, r0, r0, asr #2

c0008024 <_software_interrupt>:
c0008024:	c0008160 	andgt	r8, r0, r0, ror #2

c0008028 <_prefetch_abort>:
c0008028:	c0008180 	andgt	r8, r0, r0, lsl #3

c000802c <_data_abort>:
c000802c:	c00081a0 	andgt	r8, r0, r0, lsr #3

c0008030 <_not_used>:
c0008030:	c00081c0 	andgt	r8, r0, r0, asr #3

c0008034 <_irq>:
c0008034:	c00081e0 	andgt	r8, r0, r0, ror #3

c0008038 <_fiq>:
c0008038:	c0008200 	andgt	r8, r0, r0, lsl #4

c000803c <reset>:

 /* The actual reset code */
reset:
	@ 重新映射异常向量表的入口地址
	/* Set Vector Base Address Register */
	mrc p15, 0, r0, c1, c0, 0
c000803c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, #(1<<13)
c0008040:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	mcr p15, 0, r0, c1, c0, 0
c0008044:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	ldr	r0,=0xc0008000
c0008048:	e59f01b8 	ldr	r0, [pc, #440]	; c0008208 <stacktop+0x4>
	mcr	p15,0,r0,c12,c0,0		@ Vector Base Address Register
c000804c:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/* Set the cpu to svc32 mode */
	mrs r0, cpsr
c0008050:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0x1f
c0008054:	e3c0001f 	bic	r0, r0, #31
	orr r0, r0, #0xd3
c0008058:	e38000d3 	orr	r0, r0, #211	; 0xd3
	msr cpsr, r0
c000805c:	e129f000 	msr	CPSR_fc, r0

	/* Enable NEON/VFP unit */
	mrc p15, #0, r1, c1, c0, #2
c0008060:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr r1, r1, #(0xf << 20)
c0008064:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr p15, #0, r1, c1, c0, #2
c0008068:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}
	mov r1, #0
c000806c:	e3a01000 	mov	r1, #0
	mcr p15, #0, r1, c7, c5, #4
c0008070:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
	mov r0, #0x40000000
c0008074:	e3a00101 	mov	r0, #1073741824	; 0x40000000
	fmxr fpexc, r0
c0008078:	eee80a10 	vmsr	fpexc, r0

	/* Cache init */
	mrc	p15, 0, r0, c0, c0, 0
c000807c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and	r1, r0, #0x00f00000
c0008080:	e200160f 	and	r1, r0, #15728640	; 0xf00000
	and	r2, r0, #0x0000000f
c0008084:	e200200f 	and	r2, r0, #15
	orr r2, r2, r1, lsr #20-4
c0008088:	e1822821 	orr	r2, r2, r1, lsr #16
	cmp r2, #0x30
c000808c:	e3520030 	cmp	r2, #48	; 0x30
	mrceq p15, 0, r0, c1, c0, 1
c0008090:	0e110f30 	mrceq	15, 0, r0, cr1, cr0, {1}
	orreq r0, r0, #0x6
c0008094:	03800006 	orreq	r0, r0, #6
	mcreq p15, 0, r0, c1, c0, 1
c0008098:	0e010f30 	mcreq	15, 0, r0, cr1, cr0, {1}

	/* Invalidate L1 I/D */
	mov r0, #0
c000809c:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0
c00080a0:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0
c00080a4:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}

	/* Disable mmu stuff and caches */
	mrc p15, 0, r0, c1, c0, 0
c00080a8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, r0, #0x00002000
c00080ac:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	bic r0, r0, #0x00000007
c00080b0:	e3c00007 	bic	r0, r0, #7
	orr r0, r0, #0x00001000
c00080b4:	e3800a01 	orr	r0, r0, #4096	; 0x1000
	orr r0, r0, #0x00000002
c00080b8:	e3800002 	orr	r0, r0, #2
	orr r0, r0, #0x00000800
c00080bc:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr p15, 0, r0, c1, c0, 0
c00080c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

c00080c4 <init_stack>:

	/* Initialize stacks */
	@ 初始化各种模式下的栈空间
init_stack:
	ldr	r0, stacktop        /*get stack top pointer*/
c00080c4:	e59f0138 	ldr	r0, [pc, #312]	; c0008204 <stacktop>

	/********svc mode stack********/
	mov	sp, r0
c00080c8:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for irq mode of stack*/
c00080cc:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********irq mode stack********/
	msr	cpsr, #0xd2
c00080d0:	e329f0d2 	msr	CPSR_fc, #210	; 0xd2
	mov	sp, r0
c00080d4:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for fiq mode of stack*/
c00080d8:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********fiq mode stack********/
	msr	cpsr, #0xd1
c00080dc:	e329f0d1 	msr	CPSR_fc, #209	; 0xd1
	mov	sp, r0
c00080e0:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080e4:	e2400000 	sub	r0, r0, #0
	/********abort mode stack******/
	msr	cpsr, #0xd7
c00080e8:	e329f0d7 	msr	CPSR_fc, #215	; 0xd7
	mov	sp, r0
c00080ec:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080f0:	e2400000 	sub	r0, r0, #0
	/********undefine mode stack**/
	msr	cpsr, #0xdb
c00080f4:	e329f0db 	msr	CPSR_fc, #219	; 0xdb
	mov	sp, r0
c00080f8:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080fc:	e2400000 	sub	r0, r0, #0
    /***sys mode and usr mode stack***/
	msr	cpsr, #0x10
c0008100:	e329f010 	msr	CPSR_fc, #16
	mov	sp, r0             /*1024 byte  for user mode of stack*/
c0008104:	e1a0d000 	mov	sp, r0

    /******clear bss section********/
	@ 清除BSS段
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c0008108:	e59f00fc 	ldr	r0, [pc, #252]	; c000820c <stacktop+0x8>
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c000810c:	e59f10fc 	ldr	r1, [pc, #252]	; c0008210 <stacktop+0xc>
	mov	r2, #0x00000000		/* prepare zero to clear BSS */
c0008110:	e3a02000 	mov	r2, #0

c0008114 <clbss_l>:

clbss_l: cmp r0, r1			/* while not at end of BSS */
c0008114:	e1500001 	cmp	r0, r1
	strlo r2, [r0]			/* clear 32-bit BSS word */
c0008118:	35802000 	strcc	r2, [r0]
	addlo r0, r0, #4		/* move to next */
c000811c:	32800004 	addcc	r0, r0, #4
	blo	clbss_l
c0008120:	3afffffb 	bcc	c0008114 <clbss_l>

	/* Call _main */
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008124:	e59ff0e8 	ldr	pc, [pc, #232]	; c0008214 <stacktop+0x10>
c0008128:	e320f000 	nop	{0}
c000812c:	e320f000 	nop	{0}
c0008130:	e320f000 	nop	{0}
c0008134:	e320f000 	nop	{0}
c0008138:	e320f000 	nop	{0}
c000813c:	e320f000 	nop	{0}

c0008140 <undefined_instruction>:
/*
 * Exception handlers
 */
	.align 5  // 2的5次方，=32bit 也就是4字节对其
undefined_instruction:
	b	.
c0008140:	eafffffe 	b	c0008140 <undefined_instruction>
c0008144:	e320f000 	nop	{0}
c0008148:	e320f000 	nop	{0}
c000814c:	e320f000 	nop	{0}
c0008150:	e320f000 	nop	{0}
c0008154:	e320f000 	nop	{0}
c0008158:	e320f000 	nop	{0}
c000815c:	e320f000 	nop	{0}

c0008160 <software_interrupt>:

	.align 5
software_interrupt:
	b	.
c0008160:	eafffffe 	b	c0008160 <software_interrupt>
c0008164:	e320f000 	nop	{0}
c0008168:	e320f000 	nop	{0}
c000816c:	e320f000 	nop	{0}
c0008170:	e320f000 	nop	{0}
c0008174:	e320f000 	nop	{0}
c0008178:	e320f000 	nop	{0}
c000817c:	e320f000 	nop	{0}

c0008180 <prefetch_abort>:

	.align 5
prefetch_abort:
	b	.
c0008180:	eafffffe 	b	c0008180 <prefetch_abort>
c0008184:	e320f000 	nop	{0}
c0008188:	e320f000 	nop	{0}
c000818c:	e320f000 	nop	{0}
c0008190:	e320f000 	nop	{0}
c0008194:	e320f000 	nop	{0}
c0008198:	e320f000 	nop	{0}
c000819c:	e320f000 	nop	{0}

c00081a0 <data_abort>:

	.align 5
data_abort:
	b	.
c00081a0:	eafffffe 	b	c00081a0 <data_abort>
c00081a4:	e320f000 	nop	{0}
c00081a8:	e320f000 	nop	{0}
c00081ac:	e320f000 	nop	{0}
c00081b0:	e320f000 	nop	{0}
c00081b4:	e320f000 	nop	{0}
c00081b8:	e320f000 	nop	{0}
c00081bc:	e320f000 	nop	{0}

c00081c0 <not_used>:

	.align 5
not_used:
	b	.
c00081c0:	eafffffe 	b	c00081c0 <not_used>
c00081c4:	e320f000 	nop	{0}
c00081c8:	e320f000 	nop	{0}
c00081cc:	e320f000 	nop	{0}
c00081d0:	e320f000 	nop	{0}
c00081d4:	e320f000 	nop	{0}
c00081d8:	e320f000 	nop	{0}
c00081dc:	e320f000 	nop	{0}

c00081e0 <irq>:

	.align 5
	.global irq
irq:
	sub  lr, lr, #4
c00081e0:	e24ee004 	sub	lr, lr, #4
	stmfd sp!, {r0-r12, lr}
c00081e4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	bl do_irq
c00081e8:	eb000540 	bl	c00096f0 <do_irq>
	ldmfd sp!, {r0-r12, pc}^
c00081ec:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
c00081f0:	e320f000 	nop	{0}
c00081f4:	e320f000 	nop	{0}
c00081f8:	e320f000 	nop	{0}
c00081fc:	e320f000 	nop	{0}

c0008200 <fiq>:

	.align 5
	.global fiq
fiq:
	b .
c0008200:	eafffffe 	b	c0008200 <fiq>

c0008204 <stacktop>:
c0008204:	c000a2e0 	andgt	sl, r0, r0, ror #5
	ldr	r0,=0xc0008000
c0008208:	c0008000 	andgt	r8, r0, r0
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c000820c:	c000a3e0 	andgt	sl, r0, r0, ror #7
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c0008210:	c000a3e4 	andgt	sl, r0, r4, ror #7
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008214:	c0009a74 	andgt	r9, r0, r4, ror sl

c0008218 <__umodsi3>:
	.text
	.globl	 __umodsi3
	.type  __umodsi3       ,function
	.align 0
 __umodsi3      :
	cmp	divisor, #0
c0008218:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c000821c:	0a000026 	beq	c00082bc <Ldiv0>
	mov	curbit, #1
c0008220:	e3a03001 	mov	r3, #1
	cmp	dividend, divisor
c0008224:	e1500001 	cmp	r0, r1
	movcc	pc, lr
c0008228:	31a0f00e 	movcc	pc, lr

c000822c <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c000822c:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c0008230:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c0008234:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c0008238:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c000823c:	3afffffa 	bcc	c000822c <Loop1>

c0008240 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c0008240:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c0008244:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c0008248:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c000824c:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008250:	3afffffa 	bcc	c0008240 <Lbignum>

c0008254 <Loop3>:
Loop3:
	@ Test for possible subtractions.  On the final pass, this may
	@ subtract too much from the dividend, so keep track of which
	@ subtractions are done, we can fix them up afterwards...
	mov	overdone, #0
c0008254:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c0008258:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000825c:	20400001 	subcs	r0, r0, r1
	cmp	dividend, divisor, lsr #1
c0008260:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008264:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	overdone, overdone, curbit, ror #1
c0008268:	218220e3 	orrcs	r2, r2, r3, ror #1
	cmp	dividend, divisor, lsr #2
c000826c:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008270:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	overdone, overdone, curbit, ror #2
c0008274:	21822163 	orrcs	r2, r2, r3, ror #2
	cmp	dividend, divisor, lsr #3
c0008278:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c000827c:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	overdone, overdone, curbit, ror #3
c0008280:	218221e3 	orrcs	r2, r2, r3, ror #3
	mov	ip, curbit
c0008284:	e1a0c003 	mov	ip, r3
	cmp	dividend, #0			@ Early termination?
c0008288:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000828c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008290:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008294:	1affffee 	bne	c0008254 <Loop3>
	@ the top three bits of "overdone".  Exactly which were not needed
	@ are governed by the position of the bit, stored in ip.
	@ If we terminated early, because dividend became zero,
	@ then none of the below will match, since the bit in ip will not be
	@ in the bottom nibble.
	ands	overdone, overdone, #0xe0000000
c0008298:	e212220e 	ands	r2, r2, #-536870912	; 0xe0000000
	moveq	pc, lr				@ No fixups needed
c000829c:	01a0f00e 	moveq	pc, lr
	tst	overdone, ip, ror #3
c00082a0:	e11201ec 	tst	r2, ip, ror #3
	addne	dividend, dividend, divisor, lsr #3
c00082a4:	108001a1 	addne	r0, r0, r1, lsr #3
	tst	overdone, ip, ror #2
c00082a8:	e112016c 	tst	r2, ip, ror #2
	addne	dividend, dividend, divisor, lsr #2
c00082ac:	10800121 	addne	r0, r0, r1, lsr #2
	tst	overdone, ip, ror #1
c00082b0:	e11200ec 	tst	r2, ip, ror #1
	addne	dividend, dividend, divisor, lsr #1
c00082b4:	108000a1 	addne	r0, r0, r1, lsr #1
	mov	pc, lr
c00082b8:	e1a0f00e 	mov	pc, lr

c00082bc <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c00082bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
@	bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c00082c0:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c00082c4:	e8bd8000 	ldmfd	sp!, {pc}

c00082c8 <__udivsi3>:
	.text
	.globl	 __udivsi3
	.type  __udivsi3       ,function
	.align	0
 __udivsi3      :
	cmp	divisor, #0
c00082c8:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c00082cc:	0a00001f 	beq	c0008350 <Ldiv0>
	mov	curbit, #1
c00082d0:	e3a03001 	mov	r3, #1
	mov	result, #0
c00082d4:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c00082d8:	e1500001 	cmp	r0, r1
	bcc	Lgot_result
c00082dc:	3a000019 	bcc	c0008348 <Lgot_result>

c00082e0 <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c00082e0:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c00082e4:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c00082e8:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c00082ec:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c00082f0:	3afffffa 	bcc	c00082e0 <Loop1>

c00082f4 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c00082f4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c00082f8:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c00082fc:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c0008300:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008304:	3afffffa 	bcc	c00082f4 <Lbignum>

c0008308 <Loop3>:
Loop3:
	@ Test for possible subtractions, and note which bits
	@ are done in the result.  On the final pass, this may subtract
	@ too much from the dividend, but the result will be ok, since the
	@ "bit" will have been shifted out at the bottom.
	cmp	dividend, divisor
c0008308:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000830c:	20400001 	subcs	r0, r0, r1
	orrcs	result, result, curbit
c0008310:	21822003 	orrcs	r2, r2, r3
	cmp	dividend, divisor, lsr #1
c0008314:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008318:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	result, result, curbit, lsr #1
c000831c:	218220a3 	orrcs	r2, r2, r3, lsr #1
	cmp	dividend, divisor, lsr #2
c0008320:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008324:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	result, result, curbit, lsr #2
c0008328:	21822123 	orrcs	r2, r2, r3, lsr #2
	cmp	dividend, divisor, lsr #3
c000832c:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c0008330:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	result, result, curbit, lsr #3
c0008334:	218221a3 	orrcs	r2, r2, r3, lsr #3
	cmp	dividend, #0			@ Early termination?
c0008338:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000833c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008340:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008344:	1affffef 	bne	c0008308 <Loop3>

c0008348 <Lgot_result>:
Lgot_result:
	mov	r0, result
c0008348:	e1a00002 	mov	r0, r2
	mov	pc, lr
c000834c:	e1a0f00e 	mov	pc, lr

c0008350 <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c0008350:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	@bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c0008354:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c0008358:	e8bd8000 	ldmfd	sp!, {pc}

c000835c <__toupper>:
		c -= 'A'-'a';
	return c;
}

static inline unsigned char __toupper(unsigned char c)
{
c000835c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008360:	e28db000 	add	fp, sp, #0
c0008364:	e24dd004 	sub	sp, sp, #4
c0008368:	e1a03000 	mov	r3, r0
c000836c:	e54b3004 	strb	r3, [fp, #-4]
	if (islower(c))
c0008370:	e55b2004 	ldrb	r2, [fp, #-4]
c0008374:	e30a32e0 	movw	r3, #41696	; 0xa2e0
c0008378:	e34c3000 	movt	r3, #49152	; 0xc000
c000837c:	e7d33002 	ldrb	r3, [r3, r2]
c0008380:	e2033002 	and	r3, r3, #2
c0008384:	e3530000 	cmp	r3, #0
c0008388:	0a000002 	beq	c0008398 <__toupper+0x3c>
		c -= 'a'-'A';
c000838c:	e55b3004 	ldrb	r3, [fp, #-4]
c0008390:	e2433020 	sub	r3, r3, #32
c0008394:	e54b3004 	strb	r3, [fp, #-4]
	return c;
c0008398:	e55b3004 	ldrb	r3, [fp, #-4]
}
c000839c:	e1a00003 	mov	r0, r3
c00083a0:	e28bd000 	add	sp, fp, #0
c00083a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00083a8:	e12fff1e 	bx	lr

c00083ac <simple_strtoul>:
#include <ctype.h>
#include "uart.h"
#define size_t unsigned int

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c00083ac:	e92d4800 	push	{fp, lr}
c00083b0:	e28db004 	add	fp, sp, #4
c00083b4:	e24dd014 	sub	sp, sp, #20
c00083b8:	e50b0010 	str	r0, [fp, #-16]
c00083bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00083c0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	unsigned long result = 0,value;
c00083c4:	e3a03000 	mov	r3, #0
c00083c8:	e50b3008 	str	r3, [fp, #-8]

	if (*cp == '0') {
c00083cc:	e51b3010 	ldr	r3, [fp, #-16]
c00083d0:	e5d33000 	ldrb	r3, [r3]
c00083d4:	e3530030 	cmp	r3, #48	; 0x30
c00083d8:	1a00001a 	bne	c0008448 <simple_strtoul+0x9c>
		cp++;
c00083dc:	e51b3010 	ldr	r3, [fp, #-16]
c00083e0:	e2833001 	add	r3, r3, #1
c00083e4:	e50b3010 	str	r3, [fp, #-16]
		if ((*cp == 'x') && isxdigit(cp[1])) {
c00083e8:	e51b3010 	ldr	r3, [fp, #-16]
c00083ec:	e5d33000 	ldrb	r3, [r3]
c00083f0:	e3530078 	cmp	r3, #120	; 0x78
c00083f4:	1a00000e 	bne	c0008434 <simple_strtoul+0x88>
c00083f8:	e51b3010 	ldr	r3, [fp, #-16]
c00083fc:	e2833001 	add	r3, r3, #1
c0008400:	e5d33000 	ldrb	r3, [r3]
c0008404:	e1a02003 	mov	r2, r3
c0008408:	e30a32e0 	movw	r3, #41696	; 0xa2e0
c000840c:	e34c3000 	movt	r3, #49152	; 0xc000
c0008410:	e7d33002 	ldrb	r3, [r3, r2]
c0008414:	e2033044 	and	r3, r3, #68	; 0x44
c0008418:	e3530000 	cmp	r3, #0
c000841c:	0a000004 	beq	c0008434 <simple_strtoul+0x88>
			base = 16;
c0008420:	e3a03010 	mov	r3, #16
c0008424:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			cp++;
c0008428:	e51b3010 	ldr	r3, [fp, #-16]
c000842c:	e2833001 	add	r3, r3, #1
c0008430:	e50b3010 	str	r3, [fp, #-16]
		}
		if (!base) {
c0008434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008438:	e3530000 	cmp	r3, #0
c000843c:	1a000001 	bne	c0008448 <simple_strtoul+0x9c>
			base = 8;
c0008440:	e3a03008 	mov	r3, #8
c0008444:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		}
	}
	if (!base) {
c0008448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c000844c:	e3530000 	cmp	r3, #0
c0008450:	1a00000b 	bne	c0008484 <simple_strtoul+0xd8>
		base = 10;
c0008454:	e3a0300a 	mov	r3, #10
c0008458:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c000845c:	ea000008 	b	c0008484 <simple_strtoul+0xd8>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
c0008460:	e51b3008 	ldr	r3, [fp, #-8]
c0008464:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0008468:	e0030392 	mul	r3, r2, r3
c000846c:	e51b200c 	ldr	r2, [fp, #-12]
c0008470:	e0823003 	add	r3, r2, r3
c0008474:	e50b3008 	str	r3, [fp, #-8]
		cp++;
c0008478:	e51b3010 	ldr	r3, [fp, #-16]
c000847c:	e2833001 	add	r3, r3, #1
c0008480:	e50b3010 	str	r3, [fp, #-16]
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008484:	e51b3010 	ldr	r3, [fp, #-16]
c0008488:	e5d33000 	ldrb	r3, [r3]
c000848c:	e1a02003 	mov	r2, r3
c0008490:	e30a32e0 	movw	r3, #41696	; 0xa2e0
c0008494:	e34c3000 	movt	r3, #49152	; 0xc000
c0008498:	e7d33002 	ldrb	r3, [r3, r2]
c000849c:	e2033044 	and	r3, r3, #68	; 0x44
c00084a0:	e3530000 	cmp	r3, #0
c00084a4:	0a000024 	beq	c000853c <simple_strtoul+0x190>
c00084a8:	e51b3010 	ldr	r3, [fp, #-16]
c00084ac:	e5d33000 	ldrb	r3, [r3]
c00084b0:	e1a02003 	mov	r2, r3
c00084b4:	e30a32e0 	movw	r3, #41696	; 0xa2e0
c00084b8:	e34c3000 	movt	r3, #49152	; 0xc000
c00084bc:	e7d33002 	ldrb	r3, [r3, r2]
c00084c0:	e2033004 	and	r3, r3, #4
c00084c4:	e3530000 	cmp	r3, #0
c00084c8:	0a000003 	beq	c00084dc <simple_strtoul+0x130>
c00084cc:	e51b3010 	ldr	r3, [fp, #-16]
c00084d0:	e5d33000 	ldrb	r3, [r3]
c00084d4:	e2433030 	sub	r3, r3, #48	; 0x30
c00084d8:	ea000012 	b	c0008528 <simple_strtoul+0x17c>
c00084dc:	e51b3010 	ldr	r3, [fp, #-16]
c00084e0:	e5d33000 	ldrb	r3, [r3]
c00084e4:	e1a02003 	mov	r2, r3
c00084e8:	e30a32e0 	movw	r3, #41696	; 0xa2e0
c00084ec:	e34c3000 	movt	r3, #49152	; 0xc000
c00084f0:	e7d33002 	ldrb	r3, [r3, r2]
c00084f4:	e2033002 	and	r3, r3, #2
c00084f8:	e3530000 	cmp	r3, #0
c00084fc:	0a000006 	beq	c000851c <simple_strtoul+0x170>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
c0008500:	e51b3010 	ldr	r3, [fp, #-16]
c0008504:	e5d33000 	ldrb	r3, [r3]
c0008508:	e1a00003 	mov	r0, r3
c000850c:	ebffff92 	bl	c000835c <__toupper>
c0008510:	e1a03000 	mov	r3, r0
c0008514:	e2433037 	sub	r3, r3, #55	; 0x37
c0008518:	ea000002 	b	c0008528 <simple_strtoul+0x17c>
c000851c:	e51b3010 	ldr	r3, [fp, #-16]
c0008520:	e5d33000 	ldrb	r3, [r3]
c0008524:	e2433037 	sub	r3, r3, #55	; 0x37
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008528:	e50b300c 	str	r3, [fp, #-12]
c000852c:	e51b200c 	ldr	r2, [fp, #-12]
c0008530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008534:	e1520003 	cmp	r2, r3
c0008538:	3affffc8 	bcc	c0008460 <simple_strtoul+0xb4>
	}
	if (endp)
c000853c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008540:	e3530000 	cmp	r3, #0
c0008544:	0a000002 	beq	c0008554 <simple_strtoul+0x1a8>
		*endp = (char *)cp;
c0008548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000854c:	e51b2010 	ldr	r2, [fp, #-16]
c0008550:	e5832000 	str	r2, [r3]
	return result;
c0008554:	e51b3008 	ldr	r3, [fp, #-8]
}
c0008558:	e1a00003 	mov	r0, r3
c000855c:	e24bd004 	sub	sp, fp, #4
c0008560:	e8bd8800 	pop	{fp, pc}

c0008564 <simple_strtol>:

long simple_strtol(const char *cp,char **endp,unsigned int base)
{
c0008564:	e92d4800 	push	{fp, lr}
c0008568:	e28db004 	add	fp, sp, #4
c000856c:	e24dd00c 	sub	sp, sp, #12
c0008570:	e50b0008 	str	r0, [fp, #-8]
c0008574:	e50b100c 	str	r1, [fp, #-12]
c0008578:	e50b2010 	str	r2, [fp, #-16]
	if(*cp=='-')
c000857c:	e51b3008 	ldr	r3, [fp, #-8]
c0008580:	e5d33000 	ldrb	r3, [r3]
c0008584:	e353002d 	cmp	r3, #45	; 0x2d
c0008588:	1a000008 	bne	c00085b0 <simple_strtol+0x4c>
		return -simple_strtoul(cp+1,endp,base);
c000858c:	e51b3008 	ldr	r3, [fp, #-8]
c0008590:	e2833001 	add	r3, r3, #1
c0008594:	e51b2010 	ldr	r2, [fp, #-16]
c0008598:	e51b100c 	ldr	r1, [fp, #-12]
c000859c:	e1a00003 	mov	r0, r3
c00085a0:	ebffff81 	bl	c00083ac <simple_strtoul>
c00085a4:	e1a03000 	mov	r3, r0
c00085a8:	e2633000 	rsb	r3, r3, #0
c00085ac:	ea000004 	b	c00085c4 <simple_strtol+0x60>
	return simple_strtoul(cp,endp,base);
c00085b0:	e51b2010 	ldr	r2, [fp, #-16]
c00085b4:	e51b100c 	ldr	r1, [fp, #-12]
c00085b8:	e51b0008 	ldr	r0, [fp, #-8]
c00085bc:	ebffff7a 	bl	c00083ac <simple_strtoul>
c00085c0:	e1a03000 	mov	r3, r0
}
c00085c4:	e1a00003 	mov	r0, r3
c00085c8:	e24bd004 	sub	sp, fp, #4
c00085cc:	e8bd8800 	pop	{fp, pc}

c00085d0 <skip_atoi>:

/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
c00085d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00085d4:	e28db000 	add	fp, sp, #0
c00085d8:	e24dd008 	sub	sp, sp, #8
c00085dc:	e50b0008 	str	r0, [fp, #-8]
	int i=0;
c00085e0:	e3a03000 	mov	r3, #0
c00085e4:	e50b3004 	str	r3, [fp, #-4]

	while (is_digit(**s))
c00085e8:	ea00000e 	b	c0008628 <skip_atoi+0x58>
		i = i*10 + *((*s)++) - '0';
c00085ec:	e51b2004 	ldr	r2, [fp, #-4]
c00085f0:	e1a03002 	mov	r3, r2
c00085f4:	e1a03103 	lsl	r3, r3, #2
c00085f8:	e0833002 	add	r3, r3, r2
c00085fc:	e1a03083 	lsl	r3, r3, #1
c0008600:	e1a00003 	mov	r0, r3
c0008604:	e51b3008 	ldr	r3, [fp, #-8]
c0008608:	e5933000 	ldr	r3, [r3]
c000860c:	e2831001 	add	r1, r3, #1
c0008610:	e51b2008 	ldr	r2, [fp, #-8]
c0008614:	e5821000 	str	r1, [r2]
c0008618:	e5d33000 	ldrb	r3, [r3]
c000861c:	e0803003 	add	r3, r0, r3
c0008620:	e2433030 	sub	r3, r3, #48	; 0x30
c0008624:	e50b3004 	str	r3, [fp, #-4]
	while (is_digit(**s))
c0008628:	e51b3008 	ldr	r3, [fp, #-8]
c000862c:	e5933000 	ldr	r3, [r3]
c0008630:	e5d33000 	ldrb	r3, [r3]
c0008634:	e353002f 	cmp	r3, #47	; 0x2f
c0008638:	9a000004 	bls	c0008650 <skip_atoi+0x80>
c000863c:	e51b3008 	ldr	r3, [fp, #-8]
c0008640:	e5933000 	ldr	r3, [r3]
c0008644:	e5d33000 	ldrb	r3, [r3]
c0008648:	e3530039 	cmp	r3, #57	; 0x39
c000864c:	9affffe6 	bls	c00085ec <skip_atoi+0x1c>
	return i;
c0008650:	e51b3004 	ldr	r3, [fp, #-4]
}
c0008654:	e1a00003 	mov	r0, r3
c0008658:	e28bd000 	add	sp, fp, #0
c000865c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008660:	e12fff1e 	bx	lr

c0008664 <number>:
#ifdef CFG_64BIT_VSPRINTF
static char * number(char * str, long long num, unsigned int base, int size, int precision ,int type)
#else
static char * number(char * str, long num, unsigned int base, int size, int precision ,int type)
#endif
{
c0008664:	e92d4800 	push	{fp, lr}
c0008668:	e28db004 	add	fp, sp, #4
c000866c:	e24dd068 	sub	sp, sp, #104	; 0x68
c0008670:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
c0008674:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
c0008678:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
c000867c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	char c,sign,tmp[66];
	const char *digits="0123456789abcdefghijklmnopqrstuvwxyz";
c0008680:	e3093a88 	movw	r3, #39560	; 0x9a88
c0008684:	e34c3000 	movt	r3, #49152	; 0xc000
c0008688:	e50b300c 	str	r3, [fp, #-12]
	int i;

	if (type & LARGE)
c000868c:	e59b3008 	ldr	r3, [fp, #8]
c0008690:	e2033040 	and	r3, r3, #64	; 0x40
c0008694:	e3530000 	cmp	r3, #0
c0008698:	0a000002 	beq	c00086a8 <number+0x44>
		digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
c000869c:	e3093ab0 	movw	r3, #39600	; 0x9ab0
c00086a0:	e34c3000 	movt	r3, #49152	; 0xc000
c00086a4:	e50b300c 	str	r3, [fp, #-12]
	if (type & LEFT)
c00086a8:	e59b3008 	ldr	r3, [fp, #8]
c00086ac:	e2033010 	and	r3, r3, #16
c00086b0:	e3530000 	cmp	r3, #0
c00086b4:	0a000002 	beq	c00086c4 <number+0x60>
		type &= ~ZEROPAD;
c00086b8:	e59b3008 	ldr	r3, [fp, #8]
c00086bc:	e3c33001 	bic	r3, r3, #1
c00086c0:	e58b3008 	str	r3, [fp, #8]
	if (base < 2 || base > 36)
c00086c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086c8:	e3530001 	cmp	r3, #1
c00086cc:	9a000002 	bls	c00086dc <number+0x78>
c00086d0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086d4:	e3530024 	cmp	r3, #36	; 0x24
c00086d8:	9a000001 	bls	c00086e4 <number+0x80>
		return 0;
c00086dc:	e3a03000 	mov	r3, #0
c00086e0:	ea0000d5 	b	c0008a3c <number+0x3d8>
	c = (type & ZEROPAD) ? '0' : ' ';
c00086e4:	e59b3008 	ldr	r3, [fp, #8]
c00086e8:	e2033001 	and	r3, r3, #1
c00086ec:	e3530000 	cmp	r3, #0
c00086f0:	0a000001 	beq	c00086fc <number+0x98>
c00086f4:	e3a03030 	mov	r3, #48	; 0x30
c00086f8:	ea000000 	b	c0008700 <number+0x9c>
c00086fc:	e3a03020 	mov	r3, #32
c0008700:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	sign = 0;
c0008704:	e3a03000 	mov	r3, #0
c0008708:	e54b3005 	strb	r3, [fp, #-5]
	if (type & SIGN) {
c000870c:	e59b3008 	ldr	r3, [fp, #8]
c0008710:	e2033002 	and	r3, r3, #2
c0008714:	e3530000 	cmp	r3, #0
c0008718:	0a00001e 	beq	c0008798 <number+0x134>
		if (num < 0) {
c000871c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008720:	e3530000 	cmp	r3, #0
c0008724:	aa000008 	bge	c000874c <number+0xe8>
			sign = '-';
c0008728:	e3a0302d 	mov	r3, #45	; 0x2d
c000872c:	e54b3005 	strb	r3, [fp, #-5]
			num = -num;
c0008730:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008734:	e2633000 	rsb	r3, r3, #0
c0008738:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
			size--;
c000873c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008740:	e2433001 	sub	r3, r3, #1
c0008744:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008748:	ea000012 	b	c0008798 <number+0x134>
		} else if (type & PLUS) {
c000874c:	e59b3008 	ldr	r3, [fp, #8]
c0008750:	e2033004 	and	r3, r3, #4
c0008754:	e3530000 	cmp	r3, #0
c0008758:	0a000005 	beq	c0008774 <number+0x110>
			sign = '+';
c000875c:	e3a0302b 	mov	r3, #43	; 0x2b
c0008760:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c0008764:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008768:	e2433001 	sub	r3, r3, #1
c000876c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008770:	ea000008 	b	c0008798 <number+0x134>
		} else if (type & SPACE) {
c0008774:	e59b3008 	ldr	r3, [fp, #8]
c0008778:	e2033008 	and	r3, r3, #8
c000877c:	e3530000 	cmp	r3, #0
c0008780:	0a000004 	beq	c0008798 <number+0x134>
			sign = ' ';
c0008784:	e3a03020 	mov	r3, #32
c0008788:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c000878c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008790:	e2433001 	sub	r3, r3, #1
c0008794:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
		}
	}
	if (type & SPECIAL) {
c0008798:	e59b3008 	ldr	r3, [fp, #8]
c000879c:	e2033020 	and	r3, r3, #32
c00087a0:	e3530000 	cmp	r3, #0
c00087a4:	0a00000c 	beq	c00087dc <number+0x178>
		if (base == 16)
c00087a8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087ac:	e3530010 	cmp	r3, #16
c00087b0:	1a000003 	bne	c00087c4 <number+0x160>
			size -= 2;
c00087b4:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087b8:	e2433002 	sub	r3, r3, #2
c00087bc:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c00087c0:	ea000005 	b	c00087dc <number+0x178>
		else if (base == 8)
c00087c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087c8:	e3530008 	cmp	r3, #8
c00087cc:	1a000002 	bne	c00087dc <number+0x178>
			size--;
c00087d0:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087d4:	e2433001 	sub	r3, r3, #1
c00087d8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	}
	i = 0;
c00087dc:	e3a03000 	mov	r3, #0
c00087e0:	e50b3010 	str	r3, [fp, #-16]
	if (num == 0)
c00087e4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c00087e8:	e3530000 	cmp	r3, #0
c00087ec:	1a000022 	bne	c000887c <number+0x218>
		tmp[i++]='0';
c00087f0:	e51b3010 	ldr	r3, [fp, #-16]
c00087f4:	e2832001 	add	r2, r3, #1
c00087f8:	e50b2010 	str	r2, [fp, #-16]
c00087fc:	e24b2004 	sub	r2, fp, #4
c0008800:	e0823003 	add	r3, r2, r3
c0008804:	e3a02030 	mov	r2, #48	; 0x30
c0008808:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
c000880c:	ea00001d 	b	c0008888 <number+0x224>
	else while (num != 0)
	if (i > precision)
c0008810:	e51b2010 	ldr	r2, [fp, #-16]
c0008814:	e59b3004 	ldr	r3, [fp, #4]
c0008818:	e1520003 	cmp	r2, r3
c000881c:	da000016 	ble	c000887c <number+0x218>
		tmp[i++] = digits[do_div(num,base)];
c0008820:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008824:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008828:	e1a00003 	mov	r0, r3
c000882c:	ebfffe79 	bl	c0008218 <__umodsi3>
c0008830:	e1a03000 	mov	r3, r0
c0008834:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0008838:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c000883c:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008840:	e1a00003 	mov	r0, r3
c0008844:	ebfffe9f 	bl	c00082c8 <__udivsi3>
c0008848:	e1a03000 	mov	r3, r0
c000884c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
c0008850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008854:	e1a02003 	mov	r2, r3
c0008858:	e51b300c 	ldr	r3, [fp, #-12]
c000885c:	e0832002 	add	r2, r3, r2
c0008860:	e51b3010 	ldr	r3, [fp, #-16]
c0008864:	e2831001 	add	r1, r3, #1
c0008868:	e50b1010 	str	r1, [fp, #-16]
c000886c:	e5d22000 	ldrb	r2, [r2]
c0008870:	e24b1004 	sub	r1, fp, #4
c0008874:	e0813003 	add	r3, r1, r3
c0008878:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
	else while (num != 0)
c000887c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008880:	e3530000 	cmp	r3, #0
c0008884:	1affffe1 	bne	c0008810 <number+0x1ac>
	precision = i;
c0008888:	e51b3010 	ldr	r3, [fp, #-16]
c000888c:	e58b3004 	str	r3, [fp, #4]
	size -= precision;
c0008890:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
c0008894:	e59b3004 	ldr	r3, [fp, #4]
c0008898:	e0423003 	sub	r3, r2, r3
c000889c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	if (!(type&(ZEROPAD+LEFT)))
c00088a0:	e59b3008 	ldr	r3, [fp, #8]
c00088a4:	e2033011 	and	r3, r3, #17
c00088a8:	e3530000 	cmp	r3, #0
c00088ac:	1a00000a 	bne	c00088dc <number+0x278>
		while(size-->0)
c00088b0:	ea000004 	b	c00088c8 <number+0x264>
			*str++ = ' ';
c00088b4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088b8:	e2832001 	add	r2, r3, #1
c00088bc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088c0:	e3a02020 	mov	r2, #32
c00088c4:	e5c32000 	strb	r2, [r3]
		while(size-->0)
c00088c8:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00088cc:	e2432001 	sub	r2, r3, #1
c00088d0:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c00088d4:	e3530000 	cmp	r3, #0
c00088d8:	cafffff5 	bgt	c00088b4 <number+0x250>
	if (sign)
c00088dc:	e55b3005 	ldrb	r3, [fp, #-5]
c00088e0:	e3530000 	cmp	r3, #0
c00088e4:	0a000004 	beq	c00088fc <number+0x298>
		*str++ = sign;
c00088e8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088ec:	e2832001 	add	r2, r3, #1
c00088f0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088f4:	e55b2005 	ldrb	r2, [fp, #-5]
c00088f8:	e5c32000 	strb	r2, [r3]
	if (type & SPECIAL) {
c00088fc:	e59b3008 	ldr	r3, [fp, #8]
c0008900:	e2033020 	and	r3, r3, #32
c0008904:	e3530000 	cmp	r3, #0
c0008908:	0a000016 	beq	c0008968 <number+0x304>
		if (base==8)
c000890c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008910:	e3530008 	cmp	r3, #8
c0008914:	1a000005 	bne	c0008930 <number+0x2cc>
			*str++ = '0';
c0008918:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c000891c:	e2832001 	add	r2, r3, #1
c0008920:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008924:	e3a02030 	mov	r2, #48	; 0x30
c0008928:	e5c32000 	strb	r2, [r3]
c000892c:	ea00000d 	b	c0008968 <number+0x304>
		else if (base==16) {
c0008930:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008934:	e3530010 	cmp	r3, #16
c0008938:	1a00000a 	bne	c0008968 <number+0x304>
			*str++ = '0';
c000893c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008940:	e2832001 	add	r2, r3, #1
c0008944:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008948:	e3a02030 	mov	r2, #48	; 0x30
c000894c:	e5c32000 	strb	r2, [r3]
			*str++ = digits[33];
c0008950:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008954:	e2832001 	add	r2, r3, #1
c0008958:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c000895c:	e51b200c 	ldr	r2, [fp, #-12]
c0008960:	e5d22021 	ldrb	r2, [r2, #33]	; 0x21
c0008964:	e5c32000 	strb	r2, [r3]
		}
	}
	if (!(type & LEFT))
c0008968:	e59b3008 	ldr	r3, [fp, #8]
c000896c:	e2033010 	and	r3, r3, #16
c0008970:	e3530000 	cmp	r3, #0
c0008974:	1a000010 	bne	c00089bc <number+0x358>
		while (size-- > 0)
c0008978:	ea000004 	b	c0008990 <number+0x32c>
			*str++ = c;
c000897c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008980:	e2832001 	add	r2, r3, #1
c0008984:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008988:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
c000898c:	e5c32000 	strb	r2, [r3]
		while (size-- > 0)
c0008990:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008994:	e2432001 	sub	r2, r3, #1
c0008998:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c000899c:	e3530000 	cmp	r3, #0
c00089a0:	cafffff5 	bgt	c000897c <number+0x318>
	while (i < precision--)
c00089a4:	ea000004 	b	c00089bc <number+0x358>
		*str++ = '0';
c00089a8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089ac:	e2832001 	add	r2, r3, #1
c00089b0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089b4:	e3a02030 	mov	r2, #48	; 0x30
c00089b8:	e5c32000 	strb	r2, [r3]
	while (i < precision--)
c00089bc:	e59b3004 	ldr	r3, [fp, #4]
c00089c0:	e2432001 	sub	r2, r3, #1
c00089c4:	e58b2004 	str	r2, [fp, #4]
c00089c8:	e51b2010 	ldr	r2, [fp, #-16]
c00089cc:	e1520003 	cmp	r2, r3
c00089d0:	bafffff4 	blt	c00089a8 <number+0x344>
	while (i-- > 0)
c00089d4:	ea000007 	b	c00089f8 <number+0x394>
		*str++ = tmp[i];
c00089d8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089dc:	e2832001 	add	r2, r3, #1
c00089e0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089e4:	e24b105c 	sub	r1, fp, #92	; 0x5c
c00089e8:	e51b2010 	ldr	r2, [fp, #-16]
c00089ec:	e0812002 	add	r2, r1, r2
c00089f0:	e5d22000 	ldrb	r2, [r2]
c00089f4:	e5c32000 	strb	r2, [r3]
	while (i-- > 0)
c00089f8:	e51b3010 	ldr	r3, [fp, #-16]
c00089fc:	e2432001 	sub	r2, r3, #1
c0008a00:	e50b2010 	str	r2, [fp, #-16]
c0008a04:	e3530000 	cmp	r3, #0
c0008a08:	cafffff2 	bgt	c00089d8 <number+0x374>
	while (size-- > 0)
c0008a0c:	ea000004 	b	c0008a24 <number+0x3c0>
		*str++ = ' ';
c0008a10:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008a14:	e2832001 	add	r2, r3, #1
c0008a18:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008a1c:	e3a02020 	mov	r2, #32
c0008a20:	e5c32000 	strb	r2, [r3]
	while (size-- > 0)
c0008a24:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008a28:	e2432001 	sub	r2, r3, #1
c0008a2c:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c0008a30:	e3530000 	cmp	r3, #0
c0008a34:	cafffff5 	bgt	c0008a10 <number+0x3ac>
	return str;
c0008a38:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
}
c0008a3c:	e1a00003 	mov	r0, r3
c0008a40:	e24bd004 	sub	sp, fp, #4
c0008a44:	e8bd8800 	pop	{fp, pc}

c0008a48 <strnlen>:

/* Forward decl. needed for IP address printing stuff... */
int sprintf(char * buf, const char *fmt, ...);
size_t strnlen(const char * s, size_t count)
{
c0008a48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008a4c:	e28db000 	add	fp, sp, #0
c0008a50:	e24dd00c 	sub	sp, sp, #12
c0008a54:	e50b0008 	str	r0, [fp, #-8]
c0008a58:	e50b100c 	str	r1, [fp, #-12]
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
c0008a5c:	e51b3008 	ldr	r3, [fp, #-8]
c0008a60:	e50b3004 	str	r3, [fp, #-4]
c0008a64:	ea000002 	b	c0008a74 <strnlen+0x2c>
c0008a68:	e51b3004 	ldr	r3, [fp, #-4]
c0008a6c:	e2833001 	add	r3, r3, #1
c0008a70:	e50b3004 	str	r3, [fp, #-4]
c0008a74:	e51b300c 	ldr	r3, [fp, #-12]
c0008a78:	e2432001 	sub	r2, r3, #1
c0008a7c:	e50b200c 	str	r2, [fp, #-12]
c0008a80:	e3530000 	cmp	r3, #0
c0008a84:	0a000003 	beq	c0008a98 <strnlen+0x50>
c0008a88:	e51b3004 	ldr	r3, [fp, #-4]
c0008a8c:	e5d33000 	ldrb	r3, [r3]
c0008a90:	e3530000 	cmp	r3, #0
c0008a94:	1afffff3 	bne	c0008a68 <strnlen+0x20>
		/* nothing */;
	return sc - s;
c0008a98:	e51b2004 	ldr	r2, [fp, #-4]
c0008a9c:	e51b3008 	ldr	r3, [fp, #-8]
c0008aa0:	e0423003 	sub	r3, r2, r3
}
c0008aa4:	e1a00003 	mov	r0, r3
c0008aa8:	e28bd000 	add	sp, fp, #0
c0008aac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008ab0:	e12fff1e 	bx	lr

c0008ab4 <vsprintf>:
int vsprintf(char *buf, const char *fmt, va_list args)
{
c0008ab4:	e92d4800 	push	{fp, lr}
c0008ab8:	e28db004 	add	fp, sp, #4
c0008abc:	e24dd044 	sub	sp, sp, #68	; 0x44
c0008ac0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
c0008ac4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
c0008ac8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'q' for integer fields */

	for (str=buf ; *fmt ; ++fmt) {
c0008acc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0008ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
c0008ad4:	ea00021b 	b	c0009348 <vsprintf+0x894>
		if (*fmt != '%') {
c0008ad8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008adc:	e5d33000 	ldrb	r3, [r3]
c0008ae0:	e3530025 	cmp	r3, #37	; 0x25
c0008ae4:	0a000006 	beq	c0008b04 <vsprintf+0x50>
			*str++ = *fmt;
c0008ae8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c0008aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008af0:	e2831001 	add	r1, r3, #1
c0008af4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0008af8:	e5d22000 	ldrb	r2, [r2]
c0008afc:	e5c32000 	strb	r2, [r3]
			continue;
c0008b00:	ea00020d 	b	c000933c <vsprintf+0x888>
		}

		/* process flags */
		flags = 0;
c0008b04:	e3a03000 	mov	r3, #0
c0008b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		repeat:
			++fmt;		/* this also skips first '%' */
c0008b0c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b10:	e2833001 	add	r3, r3, #1
c0008b14:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			switch (*fmt) {
c0008b18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b1c:	e5d33000 	ldrb	r3, [r3]
c0008b20:	e2433020 	sub	r3, r3, #32
c0008b24:	e3530010 	cmp	r3, #16
c0008b28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008b2c:	ea000024 	b	c0008bc4 <vsprintf+0x110>
c0008b30:	c0008b94 	mulgt	r0, r4, fp
c0008b34:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b38:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b3c:	c0008ba4 	andgt	r8, r0, r4, lsr #23
c0008b40:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b44:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b48:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b4c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b50:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b54:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b58:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b5c:	c0008b84 	andgt	r8, r0, r4, lsl #23
c0008b60:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b64:	c0008b74 	andgt	r8, r0, r4, ror fp
c0008b68:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b6c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b70:	c0008bb4 			; <UNDEFINED> instruction: 0xc0008bb4
				case '-': flags |= LEFT; goto repeat;
c0008b74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b78:	e3833010 	orr	r3, r3, #16
c0008b7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b80:	eaffffe1 	b	c0008b0c <vsprintf+0x58>
				case '+': flags |= PLUS; goto repeat;
c0008b84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b88:	e3833004 	orr	r3, r3, #4
c0008b8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b90:	eaffffdd 	b	c0008b0c <vsprintf+0x58>
				case ' ': flags |= SPACE; goto repeat;
c0008b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b98:	e3833008 	orr	r3, r3, #8
c0008b9c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008ba0:	eaffffd9 	b	c0008b0c <vsprintf+0x58>
				case '#': flags |= SPECIAL; goto repeat;
c0008ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008ba8:	e3833020 	orr	r3, r3, #32
c0008bac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bb0:	eaffffd5 	b	c0008b0c <vsprintf+0x58>
				case '0': flags |= ZEROPAD; goto repeat;
c0008bb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008bb8:	e3833001 	orr	r3, r3, #1
c0008bbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bc0:	eaffffd1 	b	c0008b0c <vsprintf+0x58>
				}

		/* get field width */
		field_width = -1;
c0008bc4:	e3e03000 	mvn	r3, #0
c0008bc8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		if (is_digit(*fmt))
c0008bcc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008bd0:	e5d33000 	ldrb	r3, [r3]
c0008bd4:	e353002f 	cmp	r3, #47	; 0x2f
c0008bd8:	9a000008 	bls	c0008c00 <vsprintf+0x14c>
c0008bdc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008be0:	e5d33000 	ldrb	r3, [r3]
c0008be4:	e3530039 	cmp	r3, #57	; 0x39
c0008be8:	8a000004 	bhi	c0008c00 <vsprintf+0x14c>
			field_width = skip_atoi(&fmt);
c0008bec:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008bf0:	e1a00003 	mov	r0, r3
c0008bf4:	ebfffe75 	bl	c00085d0 <skip_atoi>
c0008bf8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
c0008bfc:	ea000014 	b	c0008c54 <vsprintf+0x1a0>
		else if (*fmt == '*') {
c0008c00:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c04:	e5d33000 	ldrb	r3, [r3]
c0008c08:	e353002a 	cmp	r3, #42	; 0x2a
c0008c0c:	1a000010 	bne	c0008c54 <vsprintf+0x1a0>
			++fmt;
c0008c10:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c14:	e2833001 	add	r3, r3, #1
c0008c18:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			/* it's the next argument */
			field_width = va_arg(args, int);
c0008c1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008c20:	e2832004 	add	r2, r3, #4
c0008c24:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008c28:	e5933000 	ldr	r3, [r3]
c0008c2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (field_width < 0) {
c0008c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c34:	e3530000 	cmp	r3, #0
c0008c38:	aa000005 	bge	c0008c54 <vsprintf+0x1a0>
				field_width = -field_width;
c0008c3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c40:	e2633000 	rsb	r3, r3, #0
c0008c44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= LEFT;
c0008c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008c4c:	e3833010 	orr	r3, r3, #16
c0008c50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
		}

		/* get the precision */
		precision = -1;
c0008c54:	e3e03000 	mvn	r3, #0
c0008c58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		if (*fmt == '.') {
c0008c5c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c60:	e5d33000 	ldrb	r3, [r3]
c0008c64:	e353002e 	cmp	r3, #46	; 0x2e
c0008c68:	1a000020 	bne	c0008cf0 <vsprintf+0x23c>
			++fmt;
c0008c6c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c70:	e2833001 	add	r3, r3, #1
c0008c74:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			if (is_digit(*fmt))
c0008c78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c7c:	e5d33000 	ldrb	r3, [r3]
c0008c80:	e353002f 	cmp	r3, #47	; 0x2f
c0008c84:	9a000008 	bls	c0008cac <vsprintf+0x1f8>
c0008c88:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c8c:	e5d33000 	ldrb	r3, [r3]
c0008c90:	e3530039 	cmp	r3, #57	; 0x39
c0008c94:	8a000004 	bhi	c0008cac <vsprintf+0x1f8>
				precision = skip_atoi(&fmt);
c0008c98:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008c9c:	e1a00003 	mov	r0, r3
c0008ca0:	ebfffe4a 	bl	c00085d0 <skip_atoi>
c0008ca4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
c0008ca8:	ea00000b 	b	c0008cdc <vsprintf+0x228>
			else if (*fmt == '*') {
c0008cac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cb0:	e5d33000 	ldrb	r3, [r3]
c0008cb4:	e353002a 	cmp	r3, #42	; 0x2a
c0008cb8:	1a000007 	bne	c0008cdc <vsprintf+0x228>
				++fmt;
c0008cbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cc0:	e2833001 	add	r3, r3, #1
c0008cc4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
				/* it's the next argument */
				precision = va_arg(args, int);
c0008cc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008ccc:	e2832004 	add	r2, r3, #4
c0008cd0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008cd4:	e5933000 	ldr	r3, [r3]
c0008cd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			}
			if (precision < 0)
c0008cdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008ce0:	e3530000 	cmp	r3, #0
c0008ce4:	aa000001 	bge	c0008cf0 <vsprintf+0x23c>
				precision = 0;
c0008ce8:	e3a03000 	mov	r3, #0
c0008cec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		}

		/* get the conversion qualifier */
		qualifier = -1;
c0008cf0:	e3e03000 	mvn	r3, #0
c0008cf4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008cf8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cfc:	e5d33000 	ldrb	r3, [r3]
c0008d00:	e3530068 	cmp	r3, #104	; 0x68
c0008d04:	0a000017 	beq	c0008d68 <vsprintf+0x2b4>
c0008d08:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d0c:	e5d33000 	ldrb	r3, [r3]
c0008d10:	e353006c 	cmp	r3, #108	; 0x6c
c0008d14:	0a000013 	beq	c0008d68 <vsprintf+0x2b4>
c0008d18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d1c:	e5d33000 	ldrb	r3, [r3]
c0008d20:	e353004c 	cmp	r3, #76	; 0x4c
c0008d24:	0a00000f 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d28:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d2c:	e5d33000 	ldrb	r3, [r3]
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008d30:	e353005a 	cmp	r3, #90	; 0x5a
c0008d34:	0a00000b 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d38:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d3c:	e5d33000 	ldrb	r3, [r3]
c0008d40:	e353007a 	cmp	r3, #122	; 0x7a
c0008d44:	0a000007 	beq	c0008d68 <vsprintf+0x2b4>
c0008d48:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d4c:	e5d33000 	ldrb	r3, [r3]
c0008d50:	e3530074 	cmp	r3, #116	; 0x74
c0008d54:	0a000003 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'q' ) {
c0008d58:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d5c:	e5d33000 	ldrb	r3, [r3]
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d60:	e3530071 	cmp	r3, #113	; 0x71
c0008d64:	1a000012 	bne	c0008db4 <vsprintf+0x300>
			qualifier = *fmt;
c0008d68:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d6c:	e5d33000 	ldrb	r3, [r3]
c0008d70:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			if (qualifier == 'l' && *(fmt+1) == 'l') {
c0008d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0008d78:	e353006c 	cmp	r3, #108	; 0x6c
c0008d7c:	1a000009 	bne	c0008da8 <vsprintf+0x2f4>
c0008d80:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d84:	e2833001 	add	r3, r3, #1
c0008d88:	e5d33000 	ldrb	r3, [r3]
c0008d8c:	e353006c 	cmp	r3, #108	; 0x6c
c0008d90:	1a000004 	bne	c0008da8 <vsprintf+0x2f4>
				qualifier = 'q';
c0008d94:	e3a03071 	mov	r3, #113	; 0x71
c0008d98:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				++fmt;
c0008d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008da0:	e2833001 	add	r3, r3, #1
c0008da4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			}
			++fmt;
c0008da8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dac:	e2833001 	add	r3, r3, #1
c0008db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
		}

		/* default base */
		base = 10;
c0008db4:	e3a0300a 	mov	r3, #10
c0008db8:	e50b3010 	str	r3, [fp, #-16]

		switch (*fmt) {
c0008dbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dc0:	e5d33000 	ldrb	r3, [r3]
c0008dc4:	e2433025 	sub	r3, r3, #37	; 0x25
c0008dc8:	e3530053 	cmp	r3, #83	; 0x53
c0008dcc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008dd0:	ea0000fc 	b	c00091c8 <vsprintf+0x714>
c0008dd4:	c000917c 	andgt	r9, r0, ip, ror r1
c0008dd8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ddc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dfc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e00:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e0c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e14:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e20:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e24:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e28:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e2c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e30:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e34:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e38:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e3c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e40:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e44:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e48:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e4c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e50:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e54:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e58:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e5c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e60:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e64:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e68:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e6c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e70:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e74:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e78:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e7c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e80:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e84:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e88:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e8c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e90:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e94:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e98:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e9c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea0:	c00091a0 	andgt	r9, r0, r0, lsr #3
c0008ea4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eac:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ebc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ecc:	c0008f24 	andgt	r8, r0, r4, lsr #30
c0008ed0:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ed4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ed8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008edc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee4:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ee8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef8:	c0009118 	andgt	r9, r0, r8, lsl r1
c0008efc:	c0009194 	mulgt	r0, r4, r1
c0008f00:	c00090bc 	strhgt	r9, [r0], -ip
c0008f04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f0c:	c0008fbc 			; <UNDEFINED> instruction: 0xc0008fbc
c0008f10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f14:	c0009218 	andgt	r9, r0, r8, lsl r2
c0008f18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f20:	c00091ac 	andgt	r9, r0, ip, lsr #3
		case 'c':
			if (!(flags & LEFT))
c0008f24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008f28:	e2033010 	and	r3, r3, #16
c0008f2c:	e3530000 	cmp	r3, #0
c0008f30:	1a00000b 	bne	c0008f64 <vsprintf+0x4b0>
				while (--field_width > 0)
c0008f34:	ea000004 	b	c0008f4c <vsprintf+0x498>
					*str++ = ' ';
c0008f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f3c:	e2832001 	add	r2, r3, #1
c0008f40:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f44:	e3a02020 	mov	r2, #32
c0008f48:	e5c32000 	strb	r2, [r3]
				while (--field_width > 0)
c0008f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f50:	e2433001 	sub	r3, r3, #1
c0008f54:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008f58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f5c:	e3530000 	cmp	r3, #0
c0008f60:	cafffff4 	bgt	c0008f38 <vsprintf+0x484>
			*str++ = (unsigned char) va_arg(args, int);
c0008f64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008f68:	e2832004 	add	r2, r3, #4
c0008f6c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008f70:	e5931000 	ldr	r1, [r3]
c0008f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f78:	e2832001 	add	r2, r3, #1
c0008f7c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f80:	e6ef2071 	uxtb	r2, r1
c0008f84:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008f88:	ea000004 	b	c0008fa0 <vsprintf+0x4ec>
				*str++ = ' ';
c0008f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f90:	e2832001 	add	r2, r3, #1
c0008f94:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f98:	e3a02020 	mov	r2, #32
c0008f9c:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fa4:	e2433001 	sub	r3, r3, #1
c0008fa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fb0:	e3530000 	cmp	r3, #0
c0008fb4:	cafffff4 	bgt	c0008f8c <vsprintf+0x4d8>
			continue;
c0008fb8:	ea0000df 	b	c000933c <vsprintf+0x888>

		case 's':
			s = va_arg(args, char *);
c0008fbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008fc0:	e2832004 	add	r2, r3, #4
c0008fc4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008fc8:	e5933000 	ldr	r3, [r3]
c0008fcc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (!s)
c0008fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008fd4:	e3530000 	cmp	r3, #0
c0008fd8:	1a000002 	bne	c0008fe8 <vsprintf+0x534>
				s = "<NULL>";
c0008fdc:	e3093ad8 	movw	r3, #39640	; 0x9ad8
c0008fe0:	e34c3000 	movt	r3, #49152	; 0xc000
c0008fe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			len = strnlen(s, precision);
c0008fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008fec:	e1a01003 	mov	r1, r3
c0008ff0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
c0008ff4:	ebfffe93 	bl	c0008a48 <strnlen>
c0008ff8:	e1a03000 	mov	r3, r0
c0008ffc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

			if (!(flags & LEFT))
c0009000:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009004:	e2033010 	and	r3, r3, #16
c0009008:	e3530000 	cmp	r3, #0
c000900c:	1a00000b 	bne	c0009040 <vsprintf+0x58c>
				while (len < field_width--)
c0009010:	ea000004 	b	c0009028 <vsprintf+0x574>
					*str++ = ' ';
c0009014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009018:	e2832001 	add	r2, r3, #1
c000901c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009020:	e3a02020 	mov	r2, #32
c0009024:	e5c32000 	strb	r2, [r3]
				while (len < field_width--)
c0009028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c000902c:	e2432001 	sub	r2, r3, #1
c0009030:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c0009034:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c0009038:	e1520003 	cmp	r2, r3
c000903c:	bafffff4 	blt	c0009014 <vsprintf+0x560>
			for (i = 0; i < len; ++i)
c0009040:	e3a03000 	mov	r3, #0
c0009044:	e50b300c 	str	r3, [fp, #-12]
c0009048:	ea00000a 	b	c0009078 <vsprintf+0x5c4>
				*str++ = *s++;
c000904c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0009050:	e2823001 	add	r3, r2, #1
c0009054:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0009058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000905c:	e2831001 	add	r1, r3, #1
c0009060:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0009064:	e5d22000 	ldrb	r2, [r2]
c0009068:	e5c32000 	strb	r2, [r3]
			for (i = 0; i < len; ++i)
c000906c:	e51b300c 	ldr	r3, [fp, #-12]
c0009070:	e2833001 	add	r3, r3, #1
c0009074:	e50b300c 	str	r3, [fp, #-12]
c0009078:	e51b200c 	ldr	r2, [fp, #-12]
c000907c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
c0009080:	e1520003 	cmp	r2, r3
c0009084:	bafffff0 	blt	c000904c <vsprintf+0x598>
			while (len < field_width--)
c0009088:	ea000004 	b	c00090a0 <vsprintf+0x5ec>
				*str++ = ' ';
c000908c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009090:	e2832001 	add	r2, r3, #1
c0009094:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009098:	e3a02020 	mov	r2, #32
c000909c:	e5c32000 	strb	r2, [r3]
			while (len < field_width--)
c00090a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090a4:	e2432001 	sub	r2, r3, #1
c00090a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c00090ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c00090b0:	e1520003 	cmp	r2, r3
c00090b4:	bafffff4 	blt	c000908c <vsprintf+0x5d8>
			continue;
c00090b8:	ea00009f 	b	c000933c <vsprintf+0x888>

		case 'p':
			if (field_width == -1) {
c00090bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090c0:	e3730001 	cmn	r3, #1
c00090c4:	1a000004 	bne	c00090dc <vsprintf+0x628>
				field_width = 2*sizeof(void *);
c00090c8:	e3a03008 	mov	r3, #8
c00090cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= ZEROPAD;
c00090d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090d4:	e3833001 	orr	r3, r3, #1
c00090d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
c00090dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00090e0:	e2832004 	add	r2, r3, #4
c00090e4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00090e8:	e5933000 	ldr	r3, [r3]
			str = number(str,
c00090ec:	e1a01003 	mov	r1, r3
c00090f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090f4:	e58d3004 	str	r3, [sp, #4]
c00090f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c00090fc:	e58d3000 	str	r3, [sp]
c0009100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009104:	e3a02010 	mov	r2, #16
c0009108:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c000910c:	ebfffd54 	bl	c0008664 <number>
c0009110:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
				field_width, precision, flags);
			continue;
c0009114:	ea000088 	b	c000933c <vsprintf+0x888>


		case 'n':
			if (qualifier == 'l') {
c0009118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c000911c:	e353006c 	cmp	r3, #108	; 0x6c
c0009120:	1a00000a 	bne	c0009150 <vsprintf+0x69c>
				long * ip = va_arg(args, long *);
c0009124:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009128:	e2832004 	add	r2, r3, #4
c000912c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009130:	e5933000 	ldr	r3, [r3]
c0009134:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
				*ip = (str - buf);
c0009138:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c000913c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0009140:	e0422003 	sub	r2, r2, r3
c0009144:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
c0009148:	e5832000 	str	r2, [r3]
			} else {
				int * ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
c000914c:	ea00007a 	b	c000933c <vsprintf+0x888>
				int * ip = va_arg(args, int *);
c0009150:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009154:	e2832004 	add	r2, r3, #4
c0009158:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000915c:	e5933000 	ldr	r3, [r3]
c0009160:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
				*ip = (str - buf);
c0009164:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009168:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000916c:	e0422003 	sub	r2, r2, r3
c0009170:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
c0009174:	e5832000 	str	r2, [r3]
			continue;
c0009178:	ea00006f 	b	c000933c <vsprintf+0x888>

		case '%':
			*str++ = '%';
c000917c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009180:	e2832001 	add	r2, r3, #1
c0009184:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009188:	e3a02025 	mov	r2, #37	; 0x25
c000918c:	e5c32000 	strb	r2, [r3]
			continue;
c0009190:	ea000069 	b	c000933c <vsprintf+0x888>

		/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
c0009194:	e3a03008 	mov	r3, #8
c0009198:	e50b3010 	str	r3, [fp, #-16]
			break;
c000919c:	ea00001e 	b	c000921c <vsprintf+0x768>

		case 'X':
			flags |= LARGE;
c00091a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091a4:	e3833040 	orr	r3, r3, #64	; 0x40
c00091a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'x':
			base = 16;
c00091ac:	e3a03010 	mov	r3, #16
c00091b0:	e50b3010 	str	r3, [fp, #-16]
			break;
c00091b4:	ea000018 	b	c000921c <vsprintf+0x768>

		case 'd':
		case 'i':
			flags |= SIGN;
c00091b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091bc:	e3833002 	orr	r3, r3, #2
c00091c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'u':
			break;
c00091c4:	ea000013 	b	c0009218 <vsprintf+0x764>

		default:
			*str++ = '%';
c00091c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091cc:	e2832001 	add	r2, r3, #1
c00091d0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c00091d4:	e3a02025 	mov	r2, #37	; 0x25
c00091d8:	e5c32000 	strb	r2, [r3]
			if (*fmt)
c00091dc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c00091e0:	e5d33000 	ldrb	r3, [r3]
c00091e4:	e3530000 	cmp	r3, #0
c00091e8:	0a000006 	beq	c0009208 <vsprintf+0x754>
				*str++ = *fmt;
c00091ec:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c00091f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091f4:	e2831001 	add	r1, r3, #1
c00091f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00091fc:	e5d22000 	ldrb	r2, [r2]
c0009200:	e5c32000 	strb	r2, [r3]
			else
				--fmt;
			continue;
c0009204:	ea00004c 	b	c000933c <vsprintf+0x888>
				--fmt;
c0009208:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000920c:	e2433001 	sub	r3, r3, #1
c0009210:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			continue;
c0009214:	ea000048 	b	c000933c <vsprintf+0x888>
			break;
c0009218:	e320f000 	nop	{0}
#ifdef CFG_64BIT_VSPRINTF
		if (qualifier == 'q')  /* "quad" for 64 bit variables */
			num = va_arg(args, unsigned long long);
		else
#endif
		if (qualifier == 'l') {
c000921c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009220:	e353006c 	cmp	r3, #108	; 0x6c
c0009224:	1a000005 	bne	c0009240 <vsprintf+0x78c>
			num = va_arg(args, unsigned long);
c0009228:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000922c:	e2832004 	add	r2, r3, #4
c0009230:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009234:	e5933000 	ldr	r3, [r3]
c0009238:	e50b3008 	str	r3, [fp, #-8]
c000923c:	ea000034 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'Z' || qualifier == 'z') {
c0009240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009244:	e353005a 	cmp	r3, #90	; 0x5a
c0009248:	0a000002 	beq	c0009258 <vsprintf+0x7a4>
c000924c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009250:	e353007a 	cmp	r3, #122	; 0x7a
c0009254:	1a000005 	bne	c0009270 <vsprintf+0x7bc>
			num = va_arg(args, size_t);
c0009258:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000925c:	e2832004 	add	r2, r3, #4
c0009260:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009264:	e5933000 	ldr	r3, [r3]
c0009268:	e50b3008 	str	r3, [fp, #-8]
c000926c:	ea000028 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 't') {
c0009270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009274:	e3530074 	cmp	r3, #116	; 0x74
c0009278:	1a000005 	bne	c0009294 <vsprintf+0x7e0>
			num = va_arg(args, long);
c000927c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009280:	e2832004 	add	r2, r3, #4
c0009284:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009288:	e5933000 	ldr	r3, [r3]
c000928c:	e50b3008 	str	r3, [fp, #-8]
c0009290:	ea00001f 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'h') {
c0009294:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009298:	e3530068 	cmp	r3, #104	; 0x68
c000929c:	1a00000d 	bne	c00092d8 <vsprintf+0x824>
			num = (unsigned short) va_arg(args, int);
c00092a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092a4:	e2832004 	add	r2, r3, #4
c00092a8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092ac:	e5933000 	ldr	r3, [r3]
c00092b0:	e6ff3073 	uxth	r3, r3
c00092b4:	e50b3008 	str	r3, [fp, #-8]
			if (flags & SIGN)
c00092b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092bc:	e2033002 	and	r3, r3, #2
c00092c0:	e3530000 	cmp	r3, #0
c00092c4:	0a000012 	beq	c0009314 <vsprintf+0x860>
				num = (short) num;
c00092c8:	e51b3008 	ldr	r3, [fp, #-8]
c00092cc:	e6bf3073 	sxth	r3, r3
c00092d0:	e50b3008 	str	r3, [fp, #-8]
c00092d4:	ea00000e 	b	c0009314 <vsprintf+0x860>
		} else if (flags & SIGN)
c00092d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092dc:	e2033002 	and	r3, r3, #2
c00092e0:	e3530000 	cmp	r3, #0
c00092e4:	0a000005 	beq	c0009300 <vsprintf+0x84c>
			num = va_arg(args, int);
c00092e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092ec:	e2832004 	add	r2, r3, #4
c00092f0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092f4:	e5933000 	ldr	r3, [r3]
c00092f8:	e50b3008 	str	r3, [fp, #-8]
c00092fc:	ea000004 	b	c0009314 <vsprintf+0x860>
		else
			num = va_arg(args, unsigned int);
c0009300:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009304:	e2832004 	add	r2, r3, #4
c0009308:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000930c:	e5933000 	ldr	r3, [r3]
c0009310:	e50b3008 	str	r3, [fp, #-8]
		str = number(str, num, base, field_width, precision, flags);
c0009314:	e51b1008 	ldr	r1, [fp, #-8]
c0009318:	e51b2010 	ldr	r2, [fp, #-16]
c000931c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009320:	e58d3004 	str	r3, [sp, #4]
c0009324:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0009328:	e58d3000 	str	r3, [sp]
c000932c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009330:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c0009334:	ebfffcca 	bl	c0008664 <number>
c0009338:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	for (str=buf ; *fmt ; ++fmt) {
c000933c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0009340:	e2833001 	add	r3, r3, #1
c0009344:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
c0009348:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000934c:	e5d33000 	ldrb	r3, [r3]
c0009350:	e3530000 	cmp	r3, #0
c0009354:	1afffddf 	bne	c0008ad8 <vsprintf+0x24>
	}
	*str = '\0';
c0009358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000935c:	e3a02000 	mov	r2, #0
c0009360:	e5c32000 	strb	r2, [r3]
	return str-buf;
c0009364:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009368:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000936c:	e0423003 	sub	r3, r2, r3
}
c0009370:	e1a00003 	mov	r0, r3
c0009374:	e24bd004 	sub	sp, fp, #4
c0009378:	e8bd8800 	pop	{fp, pc}

c000937c <sprintf>:

int sprintf(char * buf, const char *fmt, ...)
{
c000937c:	e92d000e 	push	{r1, r2, r3}
c0009380:	e92d4800 	push	{fp, lr}
c0009384:	e28db004 	add	fp, sp, #4
c0009388:	e24dd00c 	sub	sp, sp, #12
c000938c:	e50b0010 	str	r0, [fp, #-16]
	va_list args;
	int i;

	va_start(args, fmt);
c0009390:	e28b3008 	add	r3, fp, #8
c0009394:	e50b300c 	str	r3, [fp, #-12]
	i=vsprintf(buf,fmt,args);
c0009398:	e51b300c 	ldr	r3, [fp, #-12]
c000939c:	e1a02003 	mov	r2, r3
c00093a0:	e59b1004 	ldr	r1, [fp, #4]
c00093a4:	e51b0010 	ldr	r0, [fp, #-16]
c00093a8:	ebfffdc1 	bl	c0008ab4 <vsprintf>
c00093ac:	e50b0008 	str	r0, [fp, #-8]
	va_end(args);
	return i;
c00093b0:	e51b3008 	ldr	r3, [fp, #-8]
}
c00093b4:	e1a00003 	mov	r0, r3
c00093b8:	e24bd004 	sub	sp, fp, #4
c00093bc:	e8bd4800 	pop	{fp, lr}
c00093c0:	e28dd00c 	add	sp, sp, #12
c00093c4:	e12fff1e 	bx	lr

c00093c8 <printf>:

void printf (const char *fmt, ...)
{
c00093c8:	e92d000f 	push	{r0, r1, r2, r3}
c00093cc:	e92d4800 	push	{fp, lr}
c00093d0:	e28db004 	add	fp, sp, #4
c00093d4:	e24dd068 	sub	sp, sp, #104	; 0x68
	va_list args;
	char printbuffer[100];
	va_start (args, fmt);
c00093d8:	e28b3008 	add	r3, fp, #8
c00093dc:	e50b3008 	str	r3, [fp, #-8]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	vsprintf (printbuffer, fmt, args);
c00093e0:	e51b2008 	ldr	r2, [fp, #-8]
c00093e4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093e8:	e59b1004 	ldr	r1, [fp, #4]
c00093ec:	e1a00003 	mov	r0, r3
c00093f0:	ebfffdaf 	bl	c0008ab4 <vsprintf>
	va_end (args);
	__uart_puts (printbuffer);
c00093f4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093f8:	e1a00003 	mov	r0, r3
c00093fc:	eb000096 	bl	c000965c <__uart_puts>
}
c0009400:	e320f000 	nop	{0}
c0009404:	e24bd004 	sub	sp, fp, #4
c0009408:	e8bd4800 	pop	{fp, lr}
c000940c:	e28dd010 	add	sp, sp, #16
c0009410:	e12fff1e 	bx	lr

c0009414 <__uart_init>:
#include "stm32mp1xx_gpio.h"
#include "stm32mp1xx_uart.h"
// UART4_TX : PG11  AF6
// UART4_RX : PB2   AF8
void __uart_init()
{
c0009414:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009418:	e28db000 	add	fp, sp, #0
   	// GPIOB2 设置为复用功能
   	GPIOB->MODER &= (~(0x3 << 4));
c000941c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009420:	e3453000 	movt	r3, #20480	; 0x5000
c0009424:	e5932000 	ldr	r2, [r3]
c0009428:	e3a03a03 	mov	r3, #12288	; 0x3000
c000942c:	e3453000 	movt	r3, #20480	; 0x5000
c0009430:	e3c22030 	bic	r2, r2, #48	; 0x30
c0009434:	e5832000 	str	r2, [r3]
   	GPIOB->MODER |= (0x2 << 4);
c0009438:	e3a03a03 	mov	r3, #12288	; 0x3000
c000943c:	e3453000 	movt	r3, #20480	; 0x5000
c0009440:	e5932000 	ldr	r2, [r3]
c0009444:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009448:	e3453000 	movt	r3, #20480	; 0x5000
c000944c:	e3822020 	orr	r2, r2, #32
c0009450:	e5832000 	str	r2, [r3]
	GPIOB->AFRL &= (~(0xF << 8));
c0009454:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009458:	e3453000 	movt	r3, #20480	; 0x5000
c000945c:	e5932020 	ldr	r2, [r3, #32]
c0009460:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009464:	e3453000 	movt	r3, #20480	; 0x5000
c0009468:	e3c22c0f 	bic	r2, r2, #3840	; 0xf00
c000946c:	e5832020 	str	r2, [r3, #32]
	GPIOB->AFRL |= (0x8 << 8);
c0009470:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009474:	e3453000 	movt	r3, #20480	; 0x5000
c0009478:	e5932020 	ldr	r2, [r3, #32]
c000947c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009480:	e3453000 	movt	r3, #20480	; 0x5000
c0009484:	e3822b02 	orr	r2, r2, #2048	; 0x800
c0009488:	e5832020 	str	r2, [r3, #32]
	// GPIOG11 设置为复用功能 
	GPIOG->MODER &= (~(0x3 << 22));
c000948c:	e3a03902 	mov	r3, #32768	; 0x8000
c0009490:	e3453000 	movt	r3, #20480	; 0x5000
c0009494:	e5932000 	ldr	r2, [r3]
c0009498:	e3a03902 	mov	r3, #32768	; 0x8000
c000949c:	e3453000 	movt	r3, #20480	; 0x5000
c00094a0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
c00094a4:	e5832000 	str	r2, [r3]
	GPIOG->MODER |= (0x2 << 4);
c00094a8:	e3a03902 	mov	r3, #32768	; 0x8000
c00094ac:	e3453000 	movt	r3, #20480	; 0x5000
c00094b0:	e5932000 	ldr	r2, [r3]
c00094b4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094b8:	e3453000 	movt	r3, #20480	; 0x5000
c00094bc:	e3822020 	orr	r2, r2, #32
c00094c0:	e5832000 	str	r2, [r3]
	GPIOG->AFRH &= (~(0xF << 12));
c00094c4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094c8:	e3453000 	movt	r3, #20480	; 0x5000
c00094cc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094d0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094d4:	e3453000 	movt	r3, #20480	; 0x5000
c00094d8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
c00094dc:	e5832024 	str	r2, [r3, #36]	; 0x24
	GPIOG->AFRH |= (0x6 << 12);
c00094e0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094e4:	e3453000 	movt	r3, #20480	; 0x5000
c00094e8:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094ec:	e3a03902 	mov	r3, #32768	; 0x8000
c00094f0:	e3453000 	movt	r3, #20480	; 0x5000
c00094f4:	e3822a06 	orr	r2, r2, #24576	; 0x6000
c00094f8:	e5832024 	str	r2, [r3, #36]	; 0x24
	// 设置数据长度为8位   USART_CR1  
	USART4->CR1 &= (~(0x1 << 28));
c00094fc:	e3a03000 	mov	r3, #0
c0009500:	e3443001 	movt	r3, #16385	; 0x4001
c0009504:	e5932000 	ldr	r2, [r3]
c0009508:	e3a03000 	mov	r3, #0
c000950c:	e3443001 	movt	r3, #16385	; 0x4001
c0009510:	e3c22201 	bic	r2, r2, #268435456	; 0x10000000
c0009514:	e5832000 	str	r2, [r3]
	USART4->CR1 &= (~(0x1 << 12));
c0009518:	e3a03000 	mov	r3, #0
c000951c:	e3443001 	movt	r3, #16385	; 0x4001
c0009520:	e5932000 	ldr	r2, [r3]
c0009524:	e3a03000 	mov	r3, #0
c0009528:	e3443001 	movt	r3, #16385	; 0x4001
c000952c:	e3c22a01 	bic	r2, r2, #4096	; 0x1000
c0009530:	e5832000 	str	r2, [r3]
	// 采样率为16位 
	USART4->CR1 &= (~(0x1 << 15));
c0009534:	e3a03000 	mov	r3, #0
c0009538:	e3443001 	movt	r3, #16385	; 0x4001
c000953c:	e5932000 	ldr	r2, [r3]
c0009540:	e3a03000 	mov	r3, #0
c0009544:	e3443001 	movt	r3, #16385	; 0x4001
c0009548:	e3c22902 	bic	r2, r2, #32768	; 0x8000
c000954c:	e5832000 	str	r2, [r3]
	// 设置波特率为115200bps 
	USART4->PRESC &= (~(0xF << 0));
c0009550:	e3a03000 	mov	r3, #0
c0009554:	e3443001 	movt	r3, #16385	; 0x4001
c0009558:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
c000955c:	e3a03000 	mov	r3, #0
c0009560:	e3443001 	movt	r3, #16385	; 0x4001
c0009564:	e3c2200f 	bic	r2, r2, #15
c0009568:	e583202c 	str	r2, [r3, #44]	; 0x2c
	USART4->BRR = 0xD0;
c000956c:	e3a03000 	mov	r3, #0
c0009570:	e3443001 	movt	r3, #16385	; 0x4001
c0009574:	e3a020d0 	mov	r2, #208	; 0xd0
c0009578:	e583200c 	str	r2, [r3, #12]
	// 停止位1位
	USART4->CR2 &= (~(0x3 << 12));
c000957c:	e3a03000 	mov	r3, #0
c0009580:	e3443001 	movt	r3, #16385	; 0x4001
c0009584:	e5932004 	ldr	r2, [r3, #4]
c0009588:	e3a03000 	mov	r3, #0
c000958c:	e3443001 	movt	r3, #16385	; 0x4001
c0009590:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009594:	e5832004 	str	r2, [r3, #4]
	// 使能USART串口 
	USART4->CR1 |= (0x1 << 0);
c0009598:	e3a03000 	mov	r3, #0
c000959c:	e3443001 	movt	r3, #16385	; 0x4001
c00095a0:	e5932000 	ldr	r2, [r3]
c00095a4:	e3a03000 	mov	r3, #0
c00095a8:	e3443001 	movt	r3, #16385	; 0x4001
c00095ac:	e3822001 	orr	r2, r2, #1
c00095b0:	e5832000 	str	r2, [r3]
	// 使能USART的发送或者接收功能 
	USART4->CR1 |= (0x1 << 3);
c00095b4:	e3a03000 	mov	r3, #0
c00095b8:	e3443001 	movt	r3, #16385	; 0x4001
c00095bc:	e5932000 	ldr	r2, [r3]
c00095c0:	e3a03000 	mov	r3, #0
c00095c4:	e3443001 	movt	r3, #16385	; 0x4001
c00095c8:	e3822008 	orr	r2, r2, #8
c00095cc:	e5832000 	str	r2, [r3]
	USART4->CR1 |= (0x1 << 2);
c00095d0:	e3a03000 	mov	r3, #0
c00095d4:	e3443001 	movt	r3, #16385	; 0x4001
c00095d8:	e5932000 	ldr	r2, [r3]
c00095dc:	e3a03000 	mov	r3, #0
c00095e0:	e3443001 	movt	r3, #16385	; 0x4001
c00095e4:	e3822004 	orr	r2, r2, #4
c00095e8:	e5832000 	str	r2, [r3]

}
c00095ec:	e320f000 	nop	{0}
c00095f0:	e28bd000 	add	sp, fp, #0
c00095f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00095f8:	e12fff1e 	bx	lr

c00095fc <__uart_putc>:

void __uart_putc(const char data)
{
c00095fc:	e92d4800 	push	{fp, lr}
c0009600:	e28db004 	add	fp, sp, #4
c0009604:	e24dd004 	sub	sp, sp, #4
c0009608:	e1a03000 	mov	r3, r0
c000960c:	e54b3008 	strb	r3, [fp, #-8]
	while (!(USART4->ISR & (0x1 << 7)));
c0009610:	e320f000 	nop	{0}
c0009614:	e3a03000 	mov	r3, #0
c0009618:	e3443001 	movt	r3, #16385	; 0x4001
c000961c:	e593301c 	ldr	r3, [r3, #28]
c0009620:	e2033080 	and	r3, r3, #128	; 0x80
c0009624:	e3530000 	cmp	r3, #0
c0009628:	0afffff9 	beq	c0009614 <__uart_putc+0x18>
	USART4->TDR = data;
c000962c:	e3a03000 	mov	r3, #0
c0009630:	e3443001 	movt	r3, #16385	; 0x4001
c0009634:	e55b2008 	ldrb	r2, [fp, #-8]
c0009638:	e5832028 	str	r2, [r3, #40]	; 0x28
	if (data == '\n')
c000963c:	e55b3008 	ldrb	r3, [fp, #-8]
c0009640:	e353000a 	cmp	r3, #10
c0009644:	1a000001 	bne	c0009650 <__uart_putc+0x54>
		__uart_putc('\r');
c0009648:	e3a0000d 	mov	r0, #13
c000964c:	ebffffea 	bl	c00095fc <__uart_putc>
}
c0009650:	e320f000 	nop	{0}
c0009654:	e24bd004 	sub	sp, fp, #4
c0009658:	e8bd8800 	pop	{fp, pc}

c000965c <__uart_puts>:
void __uart_puts(const  char  *pstr)
{
c000965c:	e92d4800 	push	{fp, lr}
c0009660:	e28db004 	add	fp, sp, #4
c0009664:	e24dd004 	sub	sp, sp, #4
c0009668:	e50b0008 	str	r0, [fp, #-8]
	while(*pstr != '\0')
c000966c:	ea000005 	b	c0009688 <__uart_puts+0x2c>
		__uart_putc(*pstr++);
c0009670:	e51b3008 	ldr	r3, [fp, #-8]
c0009674:	e2832001 	add	r2, r3, #1
c0009678:	e50b2008 	str	r2, [fp, #-8]
c000967c:	e5d33000 	ldrb	r3, [r3]
c0009680:	e1a00003 	mov	r0, r3
c0009684:	ebffffdc 	bl	c00095fc <__uart_putc>
	while(*pstr != '\0')
c0009688:	e51b3008 	ldr	r3, [fp, #-8]
c000968c:	e5d33000 	ldrb	r3, [r3]
c0009690:	e3530000 	cmp	r3, #0
c0009694:	1afffff5 	bne	c0009670 <__uart_puts+0x14>
}
c0009698:	e320f000 	nop	{0}
c000969c:	e24bd004 	sub	sp, fp, #4
c00096a0:	e8bd8800 	pop	{fp, pc}

c00096a4 <__uart_getc>:

char __uart_getc(void)
{
c00096a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096a8:	e28db000 	add	fp, sp, #0
c00096ac:	e24dd004 	sub	sp, sp, #4
	char ch;
	while(!(USART4->ISR & (0x1 << 5)));
c00096b0:	e320f000 	nop	{0}
c00096b4:	e3a03000 	mov	r3, #0
c00096b8:	e3443001 	movt	r3, #16385	; 0x4001
c00096bc:	e593301c 	ldr	r3, [r3, #28]
c00096c0:	e2033020 	and	r3, r3, #32
c00096c4:	e3530000 	cmp	r3, #0
c00096c8:	0afffff9 	beq	c00096b4 <__uart_getc+0x10>
	ch = (char)USART4->RDR;
c00096cc:	e3a03000 	mov	r3, #0
c00096d0:	e3443001 	movt	r3, #16385	; 0x4001
c00096d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
c00096d8:	e54b3001 	strb	r3, [fp, #-1]
	return ch;
c00096dc:	e55b3001 	ldrb	r3, [fp, #-1]
}
c00096e0:	e1a00003 	mov	r0, r3
c00096e4:	e28bd000 	add	sp, fp, #0
c00096e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00096ec:	e12fff1e 	bx	lr

c00096f0 <do_irq>:
extern void printf(const char *fmt, ...);
unsigned int i = 0;
void do_irq(void) 
{
c00096f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096f4:	e28db000 	add	fp, sp, #0
}
c00096f8:	e320f000 	nop	{0}
c00096fc:	e28bd000 	add	sp, fp, #0
c0009700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009704:	e12fff1e 	bx	lr

c0009708 <delay_ms>:
#include"led.h"
//延时函数
void delay_ms(int ms)
{
c0009708:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c000970c:	e28db000 	add	fp, sp, #0
c0009710:	e24dd00c 	sub	sp, sp, #12
c0009714:	e50b000c 	str	r0, [fp, #-12]
 int i,j;
 for(i = 0; i < ms;i++)
c0009718:	e3a03000 	mov	r3, #0
c000971c:	e50b3004 	str	r3, [fp, #-4]
c0009720:	ea00000c 	b	c0009758 <delay_ms+0x50>
  for (j = 0; j < 1800; j++);
c0009724:	e3a03000 	mov	r3, #0
c0009728:	e50b3008 	str	r3, [fp, #-8]
c000972c:	ea000002 	b	c000973c <delay_ms+0x34>
c0009730:	e51b3008 	ldr	r3, [fp, #-8]
c0009734:	e2833001 	add	r3, r3, #1
c0009738:	e50b3008 	str	r3, [fp, #-8]
c000973c:	e51b3008 	ldr	r3, [fp, #-8]
c0009740:	e3002707 	movw	r2, #1799	; 0x707
c0009744:	e1530002 	cmp	r3, r2
c0009748:	dafffff8 	ble	c0009730 <delay_ms+0x28>
 for(i = 0; i < ms;i++)
c000974c:	e51b3004 	ldr	r3, [fp, #-4]
c0009750:	e2833001 	add	r3, r3, #1
c0009754:	e50b3004 	str	r3, [fp, #-4]
c0009758:	e51b2004 	ldr	r2, [fp, #-4]
c000975c:	e51b300c 	ldr	r3, [fp, #-12]
c0009760:	e1520003 	cmp	r2, r3
c0009764:	baffffee 	blt	c0009724 <delay_ms+0x1c>
}
c0009768:	e320f000 	nop	{0}
c000976c:	e28bd000 	add	sp, fp, #0
c0009770:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009774:	e12fff1e 	bx	lr

c0009778 <all_led_init>:
//led灯设置初始化 
 void all_led_init()
 {
c0009778:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c000977c:	e28db000 	add	fp, sp, #0
    RCC |=(0x3<<4);
c0009780:	e3003a28 	movw	r3, #2600	; 0xa28
c0009784:	e3453000 	movt	r3, #20480	; 0x5000
c0009788:	e5932000 	ldr	r2, [r3]
c000978c:	e3003a28 	movw	r3, #2600	; 0xa28
c0009790:	e3453000 	movt	r3, #20480	; 0x5000
c0009794:	e3822030 	orr	r2, r2, #48	; 0x30
c0009798:	e5832000 	str	r2, [r3]
    //led1
    GPIOE->moder &= (~(0X3<<20));
c000979c:	e3a03a06 	mov	r3, #24576	; 0x6000
c00097a0:	e3453000 	movt	r3, #20480	; 0x5000
c00097a4:	e5932000 	ldr	r2, [r3]
c00097a8:	e3a03a06 	mov	r3, #24576	; 0x6000
c00097ac:	e3453000 	movt	r3, #20480	; 0x5000
c00097b0:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
c00097b4:	e5832000 	str	r2, [r3]
    GPIOE->moder |= (0X1<<20);
c00097b8:	e3a03a06 	mov	r3, #24576	; 0x6000
c00097bc:	e3453000 	movt	r3, #20480	; 0x5000
c00097c0:	e5932000 	ldr	r2, [r3]
c00097c4:	e3a03a06 	mov	r3, #24576	; 0x6000
c00097c8:	e3453000 	movt	r3, #20480	; 0x5000
c00097cc:	e3822601 	orr	r2, r2, #1048576	; 0x100000
c00097d0:	e5832000 	str	r2, [r3]
    GPIOE->otyper &=(~(0X1<<10));
c00097d4:	e3a03a06 	mov	r3, #24576	; 0x6000
c00097d8:	e3453000 	movt	r3, #20480	; 0x5000
c00097dc:	e5932004 	ldr	r2, [r3, #4]
c00097e0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00097e4:	e3453000 	movt	r3, #20480	; 0x5000
c00097e8:	e3c22b01 	bic	r2, r2, #1024	; 0x400
c00097ec:	e5832004 	str	r2, [r3, #4]
    GPIOE->ospeedr &= (~(0X3<<20));
c00097f0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00097f4:	e3453000 	movt	r3, #20480	; 0x5000
c00097f8:	e5932008 	ldr	r2, [r3, #8]
c00097fc:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009800:	e3453000 	movt	r3, #20480	; 0x5000
c0009804:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
c0009808:	e5832008 	str	r2, [r3, #8]
    GPIOE->pupdr &= (~(0X3<<20));
c000980c:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009810:	e3453000 	movt	r3, #20480	; 0x5000
c0009814:	e593200c 	ldr	r2, [r3, #12]
c0009818:	e3a03a06 	mov	r3, #24576	; 0x6000
c000981c:	e3453000 	movt	r3, #20480	; 0x5000
c0009820:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
c0009824:	e583200c 	str	r2, [r3, #12]
     //led2
    GPIOF->moder &= (~(0X3<<20));
c0009828:	e3a03a07 	mov	r3, #28672	; 0x7000
c000982c:	e3453000 	movt	r3, #20480	; 0x5000
c0009830:	e5932000 	ldr	r2, [r3]
c0009834:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009838:	e3453000 	movt	r3, #20480	; 0x5000
c000983c:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
c0009840:	e5832000 	str	r2, [r3]
    GPIOF->moder |= (0X1<<20);
c0009844:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009848:	e3453000 	movt	r3, #20480	; 0x5000
c000984c:	e5932000 	ldr	r2, [r3]
c0009850:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009854:	e3453000 	movt	r3, #20480	; 0x5000
c0009858:	e3822601 	orr	r2, r2, #1048576	; 0x100000
c000985c:	e5832000 	str	r2, [r3]
    GPIOF->otyper &=(~(0X1<<10));
c0009860:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009864:	e3453000 	movt	r3, #20480	; 0x5000
c0009868:	e5932004 	ldr	r2, [r3, #4]
c000986c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009870:	e3453000 	movt	r3, #20480	; 0x5000
c0009874:	e3c22b01 	bic	r2, r2, #1024	; 0x400
c0009878:	e5832004 	str	r2, [r3, #4]
    GPIOF->ospeedr &= (~(0X3<<20));
c000987c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009880:	e3453000 	movt	r3, #20480	; 0x5000
c0009884:	e5932008 	ldr	r2, [r3, #8]
c0009888:	e3a03a07 	mov	r3, #28672	; 0x7000
c000988c:	e3453000 	movt	r3, #20480	; 0x5000
c0009890:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
c0009894:	e5832008 	str	r2, [r3, #8]
    GPIOF->pupdr &= (~(0X3<<20));
c0009898:	e3a03a07 	mov	r3, #28672	; 0x7000
c000989c:	e3453000 	movt	r3, #20480	; 0x5000
c00098a0:	e593200c 	ldr	r2, [r3, #12]
c00098a4:	e3a03a07 	mov	r3, #28672	; 0x7000
c00098a8:	e3453000 	movt	r3, #20480	; 0x5000
c00098ac:	e3c22603 	bic	r2, r2, #3145728	; 0x300000
c00098b0:	e583200c 	str	r2, [r3, #12]
     //led3
    GPIOE->moder &= (~(0X3<<16));
c00098b4:	e3a03a06 	mov	r3, #24576	; 0x6000
c00098b8:	e3453000 	movt	r3, #20480	; 0x5000
c00098bc:	e5932000 	ldr	r2, [r3]
c00098c0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00098c4:	e3453000 	movt	r3, #20480	; 0x5000
c00098c8:	e3c22803 	bic	r2, r2, #196608	; 0x30000
c00098cc:	e5832000 	str	r2, [r3]
    GPIOE->moder |= (0X1<<16);
c00098d0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00098d4:	e3453000 	movt	r3, #20480	; 0x5000
c00098d8:	e5932000 	ldr	r2, [r3]
c00098dc:	e3a03a06 	mov	r3, #24576	; 0x6000
c00098e0:	e3453000 	movt	r3, #20480	; 0x5000
c00098e4:	e3822801 	orr	r2, r2, #65536	; 0x10000
c00098e8:	e5832000 	str	r2, [r3]
    GPIOE->otyper &=(~(0X1<<8));
c00098ec:	e3a03a06 	mov	r3, #24576	; 0x6000
c00098f0:	e3453000 	movt	r3, #20480	; 0x5000
c00098f4:	e5932004 	ldr	r2, [r3, #4]
c00098f8:	e3a03a06 	mov	r3, #24576	; 0x6000
c00098fc:	e3453000 	movt	r3, #20480	; 0x5000
c0009900:	e3c22c01 	bic	r2, r2, #256	; 0x100
c0009904:	e5832004 	str	r2, [r3, #4]
    GPIOE->ospeedr &= (~(0X3<<16));
c0009908:	e3a03a06 	mov	r3, #24576	; 0x6000
c000990c:	e3453000 	movt	r3, #20480	; 0x5000
c0009910:	e5932008 	ldr	r2, [r3, #8]
c0009914:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009918:	e3453000 	movt	r3, #20480	; 0x5000
c000991c:	e3c22803 	bic	r2, r2, #196608	; 0x30000
c0009920:	e5832008 	str	r2, [r3, #8]
    GPIOE->pupdr &= (~(0X3<<16));
c0009924:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009928:	e3453000 	movt	r3, #20480	; 0x5000
c000992c:	e593200c 	ldr	r2, [r3, #12]
c0009930:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009934:	e3453000 	movt	r3, #20480	; 0x5000
c0009938:	e3c22803 	bic	r2, r2, #196608	; 0x30000
c000993c:	e583200c 	str	r2, [r3, #12]
 }
c0009940:	e320f000 	nop	{0}
c0009944:	e28bd000 	add	sp, fp, #0
c0009948:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c000994c:	e12fff1e 	bx	lr

c0009950 <all_led_flash>:
void  all_led_flash()
{
c0009950:	e92d4800 	push	{fp, lr}
c0009954:	e28db004 	add	fp, sp, #4
    //LED1亮
    GPIOE->odr |=(0X1<<10);
c0009958:	e3a03a06 	mov	r3, #24576	; 0x6000
c000995c:	e3453000 	movt	r3, #20480	; 0x5000
c0009960:	e5932014 	ldr	r2, [r3, #20]
c0009964:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009968:	e3453000 	movt	r3, #20480	; 0x5000
c000996c:	e3822b01 	orr	r2, r2, #1024	; 0x400
c0009970:	e5832014 	str	r2, [r3, #20]
    GPIOF->odr &= (~(0X1<<10));
c0009974:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009978:	e3453000 	movt	r3, #20480	; 0x5000
c000997c:	e5932014 	ldr	r2, [r3, #20]
c0009980:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009984:	e3453000 	movt	r3, #20480	; 0x5000
c0009988:	e3c22b01 	bic	r2, r2, #1024	; 0x400
c000998c:	e5832014 	str	r2, [r3, #20]
    GPIOE->odr &= (~(0X1<<8));
c0009990:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009994:	e3453000 	movt	r3, #20480	; 0x5000
c0009998:	e5932014 	ldr	r2, [r3, #20]
c000999c:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099a0:	e3453000 	movt	r3, #20480	; 0x5000
c00099a4:	e3c22c01 	bic	r2, r2, #256	; 0x100
c00099a8:	e5832014 	str	r2, [r3, #20]
    delay_ms(1000);
c00099ac:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c00099b0:	ebffff54 	bl	c0009708 <delay_ms>
    //LED2亮
    GPIOE->odr &=(~(0X1<<10));
c00099b4:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099b8:	e3453000 	movt	r3, #20480	; 0x5000
c00099bc:	e5932014 	ldr	r2, [r3, #20]
c00099c0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099c4:	e3453000 	movt	r3, #20480	; 0x5000
c00099c8:	e3c22b01 	bic	r2, r2, #1024	; 0x400
c00099cc:	e5832014 	str	r2, [r3, #20]
    GPIOF->odr |=(0X1<<10);
c00099d0:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099d4:	e3453000 	movt	r3, #20480	; 0x5000
c00099d8:	e5932014 	ldr	r2, [r3, #20]
c00099dc:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099e0:	e3453000 	movt	r3, #20480	; 0x5000
c00099e4:	e3822b01 	orr	r2, r2, #1024	; 0x400
c00099e8:	e5832014 	str	r2, [r3, #20]
    GPIOE->odr &= (~(0X1<<8));
c00099ec:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099f0:	e3453000 	movt	r3, #20480	; 0x5000
c00099f4:	e5932014 	ldr	r2, [r3, #20]
c00099f8:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099fc:	e3453000 	movt	r3, #20480	; 0x5000
c0009a00:	e3c22c01 	bic	r2, r2, #256	; 0x100
c0009a04:	e5832014 	str	r2, [r3, #20]
    delay_ms(1000);
c0009a08:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c0009a0c:	ebffff3d 	bl	c0009708 <delay_ms>
    
    //LED3亮
    GPIOE->odr &=(~(0X1<<10));
c0009a10:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a14:	e3453000 	movt	r3, #20480	; 0x5000
c0009a18:	e5932014 	ldr	r2, [r3, #20]
c0009a1c:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a20:	e3453000 	movt	r3, #20480	; 0x5000
c0009a24:	e3c22b01 	bic	r2, r2, #1024	; 0x400
c0009a28:	e5832014 	str	r2, [r3, #20]
    GPIOF->odr &= (~(0X1<<10));
c0009a2c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a30:	e3453000 	movt	r3, #20480	; 0x5000
c0009a34:	e5932014 	ldr	r2, [r3, #20]
c0009a38:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a3c:	e3453000 	movt	r3, #20480	; 0x5000
c0009a40:	e3c22b01 	bic	r2, r2, #1024	; 0x400
c0009a44:	e5832014 	str	r2, [r3, #20]
    GPIOE->odr |= (0X1<<8);
c0009a48:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a4c:	e3453000 	movt	r3, #20480	; 0x5000
c0009a50:	e5932014 	ldr	r2, [r3, #20]
c0009a54:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a58:	e3453000 	movt	r3, #20480	; 0x5000
c0009a5c:	e3822c01 	orr	r2, r2, #256	; 0x100
c0009a60:	e5832014 	str	r2, [r3, #20]
    delay_ms(1000);
c0009a64:	e3a00ffa 	mov	r0, #1000	; 0x3e8
c0009a68:	ebffff26 	bl	c0009708 <delay_ms>
c0009a6c:	e320f000 	nop	{0}
c0009a70:	e8bd8800 	pop	{fp, pc}

c0009a74 <main>:
#include "led.h"
int main()
{
c0009a74:	e92d4800 	push	{fp, lr}
c0009a78:	e28db004 	add	fp, sp, #4
	all_led_init();
c0009a7c:	ebffff3d 	bl	c0009778 <all_led_init>
	while(1)
	{
		all_led_flash();
c0009a80:	ebffffb2 	bl	c0009950 <all_led_flash>
c0009a84:	eafffffd 	b	c0009a80 <main+0xc>

Disassembly of section .rodata:

c0009a88 <.LC0>:
c0009a88:	33323130 	teqcc	r2, #48, 2
c0009a8c:	37363534 			; <UNDEFINED> instruction: 0x37363534
c0009a90:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
c0009a94:	66656463 	strbtvs	r6, [r5], -r3, ror #8
c0009a98:	6a696867 	bvs	c1a63c3c <__bss_end__+0x1a59858>
c0009a9c:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
c0009aa0:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
c0009aa4:	76757473 			; <UNDEFINED> instruction: 0x76757473
c0009aa8:	7a797877 	bvc	c1e67c8c <__bss_end__+0x1e5d8a8>
c0009aac:	00000000 	andeq	r0, r0, r0

c0009ab0 <.LC1>:
c0009ab0:	33323130 	teqcc	r2, #48, 2
c0009ab4:	37363534 			; <UNDEFINED> instruction: 0x37363534
c0009ab8:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
c0009abc:	46454443 	strbmi	r4, [r5], -r3, asr #8
c0009ac0:	4a494847 	bmi	c125bbe4 <__bss_end__+0x1251800>
c0009ac4:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
c0009ac8:	5251504f 	subspl	r5, r1, #79	; 0x4f
c0009acc:	56555453 			; <UNDEFINED> instruction: 0x56555453
c0009ad0:	5a595857 	bpl	c165fc34 <__bss_end__+0x1655850>
c0009ad4:	00000000 	andeq	r0, r0, r0

c0009ad8 <.LC2>:
c0009ad8:	4c554e3c 	mrrcmi	14, 3, r4, r5, cr12
c0009adc:	地址 0xc0009adc 越界。


Disassembly of section .data:

c0009ae0 <stack>:
	...

c000a2e0 <_ctype>:
c000a2e0:	08080808 	stmdaeq	r8, {r3, fp}
c000a2e4:	08080808 	stmdaeq	r8, {r3, fp}
c000a2e8:	28282808 	stmdacs	r8!, {r3, fp, sp}
c000a2ec:	08082828 	stmdaeq	r8, {r3, r5, fp, sp}
c000a2f0:	08080808 	stmdaeq	r8, {r3, fp}
c000a2f4:	08080808 	stmdaeq	r8, {r3, fp}
c000a2f8:	08080808 	stmdaeq	r8, {r3, fp}
c000a2fc:	08080808 	stmdaeq	r8, {r3, fp}
c000a300:	101010a0 	andsne	r1, r0, r0, lsr #1
c000a304:	10101010 	andsne	r1, r0, r0, lsl r0
c000a308:	10101010 	andsne	r1, r0, r0, lsl r0
c000a30c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a310:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a314:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a318:	10100404 	andsne	r0, r0, r4, lsl #8
c000a31c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a320:	41414110 	cmpmi	r1, r0, lsl r1
c000a324:	01414141 	cmpeq	r1, r1, asr #2
c000a328:	01010101 	tsteq	r1, r1, lsl #2
c000a32c:	01010101 	tsteq	r1, r1, lsl #2
c000a330:	01010101 	tsteq	r1, r1, lsl #2
c000a334:	01010101 	tsteq	r1, r1, lsl #2
c000a338:	10010101 	andne	r0, r1, r1, lsl #2
c000a33c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a340:	42424210 	submi	r4, r2, #16, 4
c000a344:	02424242 	subeq	r4, r2, #536870916	; 0x20000004
c000a348:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a34c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a350:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a354:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a358:	10020202 	andne	r0, r2, r2, lsl #4
c000a35c:	08101010 	ldmdaeq	r0, {r4, ip}
	...
c000a380:	101010a0 	andsne	r1, r0, r0, lsr #1
c000a384:	10101010 	andsne	r1, r0, r0, lsl r0
c000a388:	10101010 	andsne	r1, r0, r0, lsl r0
c000a38c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a390:	10101010 	andsne	r1, r0, r0, lsl r0
c000a394:	10101010 	andsne	r1, r0, r0, lsl r0
c000a398:	10101010 	andsne	r1, r0, r0, lsl r0
c000a39c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a3a0:	01010101 	tsteq	r1, r1, lsl #2
c000a3a4:	01010101 	tsteq	r1, r1, lsl #2
c000a3a8:	01010101 	tsteq	r1, r1, lsl #2
c000a3ac:	01010101 	tsteq	r1, r1, lsl #2
c000a3b0:	01010101 	tsteq	r1, r1, lsl #2
c000a3b4:	10010101 	andne	r0, r1, r1, lsl #2
c000a3b8:	01010101 	tsteq	r1, r1, lsl #2
c000a3bc:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
c000a3c0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3c4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3c8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3cc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3d0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3d4:	10020202 	andne	r0, r2, r2, lsl #4
c000a3d8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3dc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000

Disassembly of section .bss:

c000a3e0 <i>:
c000a3e0:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002041 	andeq	r2, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000016 	andeq	r0, r0, r6, lsl r0
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	地址 0x00000020 越界。


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_start-0xbef372dc>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	352e3720 	strcc	r3, [lr, #-1824]!	; 0xfffff8e0
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	32312e39 	eorscc	r2, r1, #912	; 0x390
  1c:	2e372029 	cdpcs	0, 3, cr2, cr7, cr9, {1}
  20:	00302e35 	eorseq	r2, r0, r5, lsr lr

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000093 	muleq	r0, r3, r0
   4:	00240002 	eoreq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	73010000 	movwvc	r0, #4096	; 0x1000
  1c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  20:	74730000 	ldrbtvc	r0, [r3], #-0
  24:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
  28:	00010053 	andeq	r0, r1, r3, asr r0
  2c:	05000000 	streq	r0, [r0, #-0]
  30:	00800002 	addeq	r0, r0, r2
  34:	011b03c0 	tsteq	fp, r0, asr #7
  38:	2f2f2f2f 	svccs	0x002f2f2f
  3c:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
  40:	2f2ff215 	svccs	0x002ff215
  44:	2f312f2f 	svccs	0x00312f2f
  48:	2f312f2f 	svccs	0x00312f2f
  4c:	2f2f2f2f 	svccs	0x002f2f2f
  50:	2f2f312f 	svccs	0x002f312f
  54:	2f2f2f2f 	svccs	0x002f2f2f
  58:	2f2f312f 	svccs	0x002f312f
  5c:	2f2f2f31 	svccs	0x002f2f31
  60:	332f2f2f 			; <UNDEFINED> instruction: 0x332f2f2f
  64:	2f302f31 	svccs	0x00302f31
  68:	2f2f302f 	svccs	0x002f302f
  6c:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
  70:	2f302f2f 	svccs	0x00302f2f
  74:	302f2f32 	eorcc	r2, pc, r2, lsr pc	; <UNPREDICTABLE>
  78:	312f2f2f 			; <UNDEFINED> instruction: 0x312f2f2f
  7c:	f6f6f6de 			; <UNDEFINED> instruction: 0xf6f6f6de
  80:	2f2ff7f6 	svccs	0x002ff7f6
  84:	8903a32f 	stmdbhi	r3, {r0, r1, r2, r3, r5, r8, r9, sp, pc}
  88:	c8034a7f 	stmdagt	r3, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
  8c:	032f2e00 			; <UNDEFINED> instruction: 0x032f2e00
  90:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
  94:	6c010100 	stfvss	f0, [r1], {-0}
  98:	02000000 	andeq	r0, r0, #0
  9c:	00002c00 	andeq	r2, r0, r0, lsl #24
  a0:	fb010200 	blx	408aa <_start-0xbffc7756>
  a4:	01000d0e 	tsteq	r0, lr, lsl #26
  a8:	00010101 	andeq	r0, r1, r1, lsl #2
  ac:	00010000 	andeq	r0, r1, r0
  b0:	6f630100 	svcvs	0x00630100
  b4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
  b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
  bc:	755f0000 	ldrbvc	r0, [pc, #-0]	; c4 <_start-0xc0007f3c>
  c0:	73646f6d 	cmnvc	r4, #436	; 0x1b4
  c4:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
  c8:	00000100 	andeq	r0, r0, r0, lsl #2
  cc:	02050000 	andeq	r0, r5, #0
  d0:	c0008218 	andgt	r8, r0, r8, lsl r2
  d4:	2f011203 	svccs	0x00011203
  d8:	342f2f2f 	strtcc	r2, [pc], #-3887	; e0 <_start-0xc0007f20>
  dc:	2f2f2f2f 	svccs	0x002f2f2f
  e0:	2f2f2f32 	svccs	0x002f2f32
  e4:	2f2f332f 	svccs	0x002f332f
  e8:	2f2f2f2f 	svccs	0x002f2f2f
  ec:	2f2f2f2f 	svccs	0x002f2f2f
  f0:	2f2f2f2f 	svccs	0x002f2f2f
  f4:	2f352f2f 	svccs	0x00352f2f
  f8:	2f2f2f2f 	svccs	0x002f2f2f
  fc:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 100:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
 104:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
 108:	02000000 	andeq	r0, r0, #0
 10c:	00002c00 	andeq	r2, r0, r0, lsl #24
 110:	fb010200 	blx	4091a <_start-0xbffc76e6>
 114:	01000d0e 	tsteq	r0, lr, lsl #26
 118:	00010101 	andeq	r0, r1, r1, lsl #2
 11c:	00010000 	andeq	r0, r1, r0
 120:	6f630100 	svcvs	0x00630100
 124:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 128:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 12c:	755f0000 	ldrbvc	r0, [pc, #-0]	; 134 <_start-0xc0007ecc>
 130:	73766964 	cmnvc	r6, #100, 18	; 0x190000
 134:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	02050000 	andeq	r0, r5, #0
 140:	c00082c8 	andgt	r8, r0, r8, asr #5
 144:	2f011103 	svccs	0x00011103
 148:	2f2f2f2f 	svccs	0x002f2f2f
 14c:	2f2f2f34 	svccs	0x002f2f34
 150:	2f2f322f 	svccs	0x002f322f
 154:	2f342f2f 	svccs	0x00342f2f
 158:	2f2f2f2f 	svccs	0x002f2f2f
 15c:	2f2f2f2f 	svccs	0x002f2f2f
 160:	2f2f2f2f 	svccs	0x002f2f2f
 164:	2f302f2f 	svccs	0x00302f2f
 168:	022f3030 	eoreq	r3, pc, #48	; 0x30
 16c:	01010002 	tsteq	r1, r2
 170:	0000022e 	andeq	r0, r0, lr, lsr #4
 174:	00520002 	subseq	r0, r2, r2
 178:	01020000 	mrseq	r0, (UNDEF: 2)
 17c:	000d0efb 	strdeq	r0, [sp], -fp
 180:	01010101 	tsteq	r1, r1, lsl #2
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 18c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; d8 <_start-0xc0007f28>
 190:	2f6e6f6d 	svccs	0x006e6f6d
 194:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 198:	00656475 	rsbeq	r6, r5, r5, ror r4
 19c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1a0:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
 1a4:	00006372 	andeq	r6, r0, r2, ror r3
 1a8:	70797463 	rsbsvc	r7, r9, r3, ror #8
 1ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
 1b0:	70000001 	andvc	r0, r0, r1
 1b4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 1b8:	00632e66 	rsbeq	r2, r3, r6, ror #28
 1bc:	73000002 	movwvc	r0, #2
 1c0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 1c4:	00682e67 	rsbeq	r2, r8, r7, ror #28
 1c8:	00000001 	andeq	r0, r0, r1
 1cc:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
 1d0:	03c00083 	biceq	r0, r0, #131	; 0x83
 1d4:	9f0100c4 	svcls	0x000100c4
 1d8:	042f67d7 	strteq	r6, [pc], #-2007	; 1e0 <_start-0xc0007e20>
 1dc:	7fbe0302 	svcvc	0x00be0302
 1e0:	834cbb82 	movthi	fp, #52098	; 0xcb82
 1e4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 1e8:	06820601 	streq	r0, [r2], r1, lsl #12
 1ec:	684b3d08 	stmdavs	fp, {r3, r8, sl, fp, ip, sp}^
 1f0:	4c674d67 	stclmi	13, cr4, [r7], #-412	; 0xfffffe64
 1f4:	0063bb30 	rsbeq	fp, r3, r0, lsr fp
 1f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1fc:	02002008 	andeq	r2, r0, #8
 200:	20080204 	andcs	r0, r8, r4, lsl #4
 204:	03040200 	movweq	r0, #16896	; 0x4200
 208:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 20c:	21080605 	tstcs	r8, r5, lsl #12
 210:	06040200 	streq	r0, [r4], -r0, lsl #4
 214:	0200d606 	andeq	sp, r0, #6291456	; 0x600000
 218:	65060904 	strvs	r0, [r6, #-2308]	; 0xfffff6fc
 21c:	2f6767a3 	svccs	0x006767a3
 220:	0883bb69 	stmeq	r3, {r0, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 224:	24039f21 	strcs	r9, [r3], #-3873	; 0xfffff0df
 228:	2f4c8366 	svccs	0x004c8366
 22c:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 230:	9e060104 	adflss	f0, f6, f4
 234:	032fa006 			; <UNDEFINED> instruction: 0x032fa006
 238:	69d88220 	ldmibvs	r8, {r5, r9, pc}^
 23c:	67836783 	strvs	r6, [r3, r3, lsl #15]
 240:	01040200 	mrseq	r0, R12_usr
 244:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 248:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 24c:	00820601 	addeq	r0, r2, r1, lsl #12
 250:	4a020402 	bmi	81260 <_start-0xbff86da0>
 254:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 258:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 25c:	002f0604 	eoreq	r0, pc, r4, lsl #12
 260:	4b040402 	blmi	101270 <_start-0xbff06d90>
 264:	674b6783 	strbvs	r6, [fp, -r3, lsl #15]
 268:	834b8383 	movthi	r8, #45955	; 0xb383
 26c:	83694b83 	cmnhi	r9, #134144	; 0x20c00
 270:	68678367 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, pc}^
 274:	83f4674b 	mvnshi	r6, #19660800	; 0x12c0000
 278:	69102e02 	ldmdbvs	r0, {r1, r9, sl, fp, sp}
 27c:	2f83834b 	svccs	0x0083834b
 280:	9f67a09d 	svcls	0x0067a09d
 284:	67bb6783 	ldrvs	r6, [fp, r3, lsl #15]!
 288:	2f83bd9f 	svccs	0x0083bd9f
 28c:	9d2fa09d 	stcls	0, cr10, [pc, #-628]!	; 20 <_start-0xc0007fe0>
 290:	a0f12fbc 	ldrhtge	r2, [r1], #252	; 0xfc
 294:	00a09d2f 	adceq	r9, r0, pc, lsr #26
 298:	2f010402 	svccs	0x00010402
 29c:	0200a16b 	andeq	sl, r0, #-1073741798	; 0xc000001a
 2a0:	66060404 	strvs	r0, [r6], -r4, lsl #8
 2a4:	01040200 	mrseq	r0, R12_usr
 2a8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 2ac:	84069e03 	strhi	r9, [r6], #-3587	; 0xfffff1fd
 2b0:	12038467 	andne	r8, r3, #1728053248	; 0x67000000
 2b4:	bb8367ba 	bllt	fe0da1a4 <__bss_end__+0x3e0cfdc0>
 2b8:	02674c32 	rsbeq	r4, r7, #12800	; 0x3200
 2bc:	8383132e 	orrhi	r1, r3, #-1207959552	; 0xb8000000
 2c0:	4b868383 	blmi	fe1a10d4 <__bss_end__+0x3e196cf0>
 2c4:	01040200 	mrseq	r0, R12_usr
 2c8:	83068206 	movwhi	r8, #25094	; 0x6206
 2cc:	9f68839f 	svcls	0x0068839f
 2d0:	4b6b6767 	blmi	1ada074 <_start-0xbe52df8c>
 2d4:	02006783 	andeq	r6, r0, #34340864	; 0x20c0000
 2d8:	82060104 	andhi	r0, r6, #4, 2
 2dc:	839f8306 	orrshi	r8, pc, #402653184	; 0x18000000
 2e0:	4e67a068 	cdpmi	0, 6, cr10, cr7, cr8, {3}
 2e4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2e8:	00820601 	addeq	r0, r2, r1, lsl #12
 2ec:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 2f0:	03040200 	movweq	r0, #16896	; 0x4200
 2f4:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
 2f8:	4b490304 	blmi	1240f10 <_start-0xbedc70f0>
 2fc:	01040200 	mrseq	r0, R12_usr
 300:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
 304:	83060204 	movwhi	r0, #25092	; 0x6204
 308:	02040200 	andeq	r0, r4, #0, 4
 30c:	00674c49 	rsbeq	r4, r7, r9, asr #24
 310:	06010402 	streq	r0, [r1], -r2, lsl #8
 314:	4b9f0666 	blmi	fe7c1cb4 <__bss_end__+0x3e7b78d0>
 318:	024c6a68 	subeq	r6, ip, #104, 20	; 0x68000
 31c:	831401b4 	tsthi	r4, #180, 2	; 0x2d
 320:	08bc9d2f 	ldmeq	ip!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, pc}
 324:	bc9d2f21 	ldclt	15, cr2, [sp], {33}	; 0x21
 328:	68679f31 	stmdavs	r7!, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
 32c:	9d2f83bc 	stcls	3, cr8, [pc, #-752]!	; 44 <_start-0xc0007fbc>
 330:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 334:	02006703 	andeq	r6, r0, #786432	; 0xc0000
 338:	00f10304 	rscseq	r0, r1, r4, lsl #6
 33c:	06010402 	streq	r0, [r1], -r2, lsl #8
 340:	2f840666 	svccs	0x00840666
 344:	6731bc9d 			; <UNDEFINED> instruction: 0x6731bc9d
 348:	0881694b 	stmeq	r1, {r0, r1, r3, r6, r8, fp, sp, lr}
 34c:	9f67323f 	svcls	0x0067323f
 350:	a09f2ba3 	addsge	r2, pc, r3, lsr #23
 354:	4b329f31 	blmi	ca8020 <_start-0xbf35ffe0>
 358:	324b6831 	subcc	r6, fp, #3211264	; 0x310000
 35c:	839f3168 	orrshi	r3, pc, #104, 2
 360:	03672dbd 	cmneq	r7, #12096	; 0x2f40
 364:	0f032e78 	svceq	0x00032e78
 368:	00bb672e 	adcseq	r6, fp, lr, lsr #14
 36c:	06010402 	streq	r0, [r1], -r2, lsl #8
 370:	bb670666 	bllt	19c1d10 <_start-0xbe6462f0>
 374:	bb67bb67 	bllt	19ef118 <_start-0xbe618ee8>
 378:	bc838383 	stclt	3, cr8, [r3], {131}	; 0x83
 37c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 380:	7ee20302 	cdpvc	3, 14, cr0, cr2, cr2, {0}
 384:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
 388:	66060104 	strvs	r0, [r6], -r4, lsl #2
 38c:	01a00306 	lsleq	r0, r6, #6
 390:	69676782 	stmdbvs	r7!, {r1, r7, r8, r9, sl, sp, lr}^
 394:	2fbc4ba2 	svccs	0x00bc4ba2
 398:	a04f85a1 	subge	r8, pc, r1, lsr #11
 39c:	000a0267 	andeq	r0, sl, r7, ror #4
 3a0:	00a60101 	adceq	r0, r6, r1, lsl #2
 3a4:	00020000 	andeq	r0, r2, r0
 3a8:	00000063 	andeq	r0, r0, r3, rrx
 3ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 3b0:	0101000d 	tsteq	r1, sp
 3b4:	00000101 	andeq	r0, r0, r1, lsl #2
 3b8:	00000100 	andeq	r0, r0, r0, lsl #2
 3bc:	6d6f6301 	stclvs	3, cr6, [pc, #-4]!	; 3c0 <_start-0xc0007c40>
 3c0:	2f6e6f6d 	svccs	0x006e6f6d
 3c4:	00637273 	rsbeq	r7, r3, r3, ror r2
 3c8:	6f632f2e 	svcvs	0x00632f2e
 3cc:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 3d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 3d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 3d8:	61750000 	cmnvs	r5, r0
 3dc:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
 3e0:	00000100 	andeq	r0, r0, r0, lsl #2
 3e4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 3e8:	31706d32 	cmncc	r0, r2, lsr sp
 3ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 3f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 3f4:	00020068 	andeq	r0, r2, r8, rrx
 3f8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 3fc:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 400:	5f787831 	svcpl	0x00787831
 404:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 408:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 40c:	00000000 	andeq	r0, r0, r0
 410:	94140205 	ldrls	r0, [r4], #-517	; 0xfffffdfb
 414:	4c17c000 	ldcmi	0, cr12, [r7], {-0}
 418:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 41c:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 420:	d7d8d8d7 			; <UNDEFINED> instruction: 0xd7d8d8d7
 424:	d7d8d884 	ldrble	sp, [r8, r4, lsl #17]
 428:	009f85d8 			; <UNDEFINED> instruction: 0x009f85d8
 42c:	06010402 	streq	r0, [r1], -r2, lsl #8
 430:	83bb062e 			; <UNDEFINED> instruction: 0x83bb062e
 434:	83684b67 	cmnhi	r8, #105472	; 0x19c00
 438:	6984b92f 	stmibvs	r4, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 43c:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 440:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 444:	022f83bb 	eoreq	r8, pc, #-335544318	; 0xec000002
 448:	01010008 	tsteq	r1, r8
 44c:	00000037 	andeq	r0, r0, r7, lsr r0
 450:	00230002 	eoreq	r0, r3, r2
 454:	01020000 	mrseq	r0, (UNDEF: 2)
 458:	000d0efb 	strdeq	r0, [sp], -fp
 45c:	01010101 	tsteq	r1, r1, lsl #2
 460:	01000000 	mrseq	r0, (UNDEF: 0)
 464:	73010000 	movwvc	r0, #4096	; 0x1000
 468:	00006372 	andeq	r6, r0, r2, ror r3
 46c:	695f6f64 	ldmdbvs	pc, {r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 470:	632e7172 			; <UNDEFINED> instruction: 0x632e7172
 474:	00000100 	andeq	r0, r0, r0, lsl #2
 478:	02050000 	andeq	r0, r5, #0
 47c:	c00096f0 	strdgt	r9, [r0], -r0
 480:	08024b15 	stmdaeq	r2, {r0, r2, r4, r8, r9, fp, lr}
 484:	81010100 	mrshi	r0, (UNDEF: 17)
 488:	02000000 	andeq	r0, r0, #0
 48c:	00003300 	andeq	r3, r0, r0, lsl #6
 490:	fb010200 	blx	40c9a <_start-0xbffc7366>
 494:	01000d0e 	tsteq	r0, lr, lsl #26
 498:	00010101 	andeq	r0, r1, r1, lsl #2
 49c:	00010000 	andeq	r0, r1, r0
 4a0:	72730100 	rsbsvc	r0, r3, #0, 2
 4a4:	2f2e0063 	svccs	0x002e0063
 4a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 4ac:	00656475 	rsbeq	r6, r5, r5, ror r4
 4b0:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
 4b4:	0100632e 	tsteq	r0, lr, lsr #6
 4b8:	656c0000 	strbvs	r0, [ip, #-0]!
 4bc:	00682e64 	rsbeq	r2, r8, r4, ror #28
 4c0:	00000002 	andeq	r0, r0, r2
 4c4:	08020500 	stmdaeq	r2, {r8, sl}
 4c8:	15c00097 	strbne	r0, [r0, #151]	; 0x97
 4cc:	02006784 	andeq	r6, r0, #132, 14	; 0x2100000
 4d0:	66060304 	strvs	r0, [r6], -r4, lsl #6
 4d4:	01040200 	mrseq	r0, R12_usr
 4d8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 4dc:	00810602 	addeq	r0, r1, r2, lsl #12
 4e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 4e4:	85840666 	strhi	r0, [r4, #1638]	; 0x666
 4e8:	d7d7d84b 	ldrble	sp, [r7, fp, asr #16]
 4ec:	d7d8d7d7 			; <UNDEFINED> instruction: 0xd7d8d7d7
 4f0:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 4f4:	d7d7d7d7 			; <UNDEFINED> instruction: 0xd7d7d7d7
 4f8:	d74c84d7 			; <UNDEFINED> instruction: 0xd74c84d7
 4fc:	d74cd7d7 			; <UNDEFINED> instruction: 0xd74cd7d7
 500:	d74dd7d7 			; <UNDEFINED> instruction: 0xd74dd7d7
 504:	024bd7d7 	subeq	sp, fp, #56360960	; 0x35c0000
 508:	01010004 	tsteq	r1, r4
 50c:	00000036 	andeq	r0, r0, r6, lsr r0
 510:	001d0002 	andseq	r0, sp, r2
 514:	01020000 	mrseq	r0, (UNDEF: 2)
 518:	000d0efb 	strdeq	r0, [sp], -fp
 51c:	01010101 	tsteq	r1, r1, lsl #2
 520:	01000000 	mrseq	r0, (UNDEF: 0)
 524:	00010000 	andeq	r0, r1, r0
 528:	6e69616d 	powvsez	f6, f1, #5.0
 52c:	0000632e 	andeq	r6, r0, lr, lsr #6
 530:	00000000 	andeq	r0, r0, r0
 534:	9a740205 	bls	1d00d50 <_start-0xbe3072b0>
 538:	4b14c000 	blmi	530540 <_start-0xbfad7ac0>
 53c:	01040200 	mrseq	r0, R12_usr
 540:	00040231 	andeq	r0, r4, r1, lsr r2
 544:	地址 0x00000544 越界。


Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000048 	andeq	r0, r0, r8, asr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	c0008000 	andgt	r8, r0, r0
  14:	c0008218 	andgt	r8, r0, r8, lsl r2
  18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  1c:	74732f74 	ldrbtvc	r2, [r3], #-3956	; 0xfffff08c
  20:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
  24:	6d2f0053 	stcvs	0, cr0, [pc, #-332]!	; fffffee0 <__bss_end__+0x3fff5afc>
  28:	682f746e 	stmdavs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
  2c:	2f736667 	svccs	0x00736667
  30:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
  34:	302f3165 	eorcc	r3, pc, r5, ror #2
  38:	00632d32 	rsbeq	r2, r3, r2, lsr sp
  3c:	20554e47 	subscs	r4, r5, r7, asr #28
  40:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
  44:	2e38322e 	cdpcs	2, 3, cr3, cr8, cr14, {1}
  48:	80010032 	andhi	r0, r1, r2, lsr r0
  4c:	00000050 	andeq	r0, r0, r0, asr r0
  50:	00140002 	andseq	r0, r4, r2
  54:	01040000 	mrseq	r0, (UNDEF: 4)
  58:	00000097 	muleq	r0, r7, r0
  5c:	c0008218 	andgt	r8, r0, r8, lsl r2
  60:	c00082c8 	andgt	r8, r0, r8, asr #5
  64:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  68:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
  6c:	5f2f6372 	svcpl	0x002f6372
  70:	646f6d75 	strbtvs	r6, [pc], #-3445	; 78 <_start-0xc0007f88>
  74:	2e336973 			; <UNDEFINED> instruction: 0x2e336973
  78:	6d2f0053 	stcvs	0, cr0, [pc, #-332]!	; ffffff34 <__bss_end__+0x3fff5b50>
  7c:	682f746e 	stmdavs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
  80:	2f736667 	svccs	0x00736667
  84:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
  88:	302f3165 	eorcc	r3, pc, r5, ror #2
  8c:	00632d32 	rsbeq	r2, r3, r2, lsr sp
  90:	20554e47 	subscs	r4, r5, r7, asr #28
  94:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
  98:	2e38322e 	cdpcs	2, 3, cr3, cr8, cr14, {1}
  9c:	80010032 	andhi	r0, r1, r2, lsr r0
  a0:	00000050 	andeq	r0, r0, r0, asr r0
  a4:	00280002 	eoreq	r0, r8, r2
  a8:	01040000 	mrseq	r0, (UNDEF: 4)
  ac:	00000107 	andeq	r0, r0, r7, lsl #2
  b0:	c00082c8 	andgt	r8, r0, r8, asr #5
  b4:	c000835c 	andgt	r8, r0, ip, asr r3
  b8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  bc:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
  c0:	5f2f6372 	svcpl	0x002f6372
  c4:	76696475 			; <UNDEFINED> instruction: 0x76696475
  c8:	2e336973 			; <UNDEFINED> instruction: 0x2e336973
  cc:	6d2f0053 	stcvs	0, cr0, [pc, #-332]!	; ffffff88 <__bss_end__+0x3fff5ba4>
  d0:	682f746e 	stmdavs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
  d4:	2f736667 	svccs	0x00736667
  d8:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
  dc:	302f3165 	eorcc	r3, pc, r5, ror #2
  e0:	00632d32 	rsbeq	r2, r3, r2, lsr sp
  e4:	20554e47 	subscs	r4, r5, r7, asr #28
  e8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
  ec:	2e38322e 	cdpcs	2, 3, cr3, cr8, cr14, {1}
  f0:	80010032 	andhi	r0, r1, r2, lsr r0
  f4:	0000047e 	andeq	r0, r0, lr, ror r4
  f8:	003c0004 	eorseq	r0, ip, r4
  fc:	01040000 	mrseq	r0, (UNDEF: 4)
 100:	00000052 	andeq	r0, r0, r2, asr r0
 104:	0001110c 	andeq	r1, r1, ip, lsl #2
 108:	00015700 	andeq	r5, r1, r0, lsl #14
 10c:	00835c00 	addeq	r5, r3, r0, lsl #24
 110:	0010b8c0 	andseq	fp, r0, r0, asr #17
 114:	00017000 	andeq	r7, r1, r0
 118:	00390200 	eorseq	r0, r9, r0, lsl #4
 11c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 120:	00000030 	andeq	r0, r0, r0, lsr r0
 124:	00070403 	andeq	r0, r7, r3, lsl #8
 128:	40020000 	andmi	r0, r2, r0
 12c:	03000000 	movweq	r0, #0
 130:	00002566 	andeq	r2, r0, r6, ror #10
 134:	00580400 	subseq	r0, r8, r0, lsl #8
 138:	00510000 	subseq	r0, r1, r0
 13c:	51050000 	mrspl	r0, (UNDEF: 5)
 140:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 144:	07040600 	streq	r0, [r4, -r0, lsl #12]
 148:	000000f1 	strdeq	r0, [r0], -r1
 14c:	de080106 	adflee	f0, f0, f6
 150:	07000000 	streq	r0, [r0, -r0]
 154:	0000017c 	andeq	r0, r0, ip, ror r1
 158:	00411101 	subeq	r1, r1, r1, lsl #2
 15c:	03050000 	movweq	r0, #20480	; 0x5000
 160:	c000a2e0 	andgt	sl, r0, r0, ror #5
 164:	0001b608 	andeq	fp, r1, r8, lsl #12
 168:	017d0200 	cmneq	sp, r0, lsl #4
 16c:	c00093c8 	andgt	r9, r0, r8, asr #7
 170:	0000004c 	andeq	r0, r0, ip, asr #32
 174:	00b69c01 	adcseq	r9, r6, r1, lsl #24
 178:	66090000 	strvs	r0, [r9], -r0
 17c:	0200746d 	andeq	r7, r0, #1828716544	; 0x6d000000
 180:	00b6017d 	adcseq	r0, r6, sp, ror r1
 184:	91020000 	mrsls	r0, (UNDEF: 2)
 188:	9b0b0a70 	blls	2c2b50 <_start-0xbfd454b0>
 18c:	02000001 	andeq	r0, r0, #1
 190:	0036017f 	eorseq	r0, r6, pc, ror r1
 194:	91020000 	mrsls	r0, (UNDEF: 2)
 198:	01830b64 	orreq	r0, r3, r4, ror #22
 19c:	80020000 	andhi	r0, r2, r0
 1a0:	0000c801 	andeq	ip, r0, r1, lsl #16
 1a4:	80910300 	addshi	r0, r1, r0, lsl #6
 1a8:	040c007f 	streq	r0, [ip], #-127	; 0xffffff81
 1ac:	000000c3 	andeq	r0, r0, r3, asr #1
 1b0:	e7080106 	str	r0, [r8, -r6, lsl #2]
 1b4:	0d000000 	stceq	0, cr0, [r0, #-0]
 1b8:	000000bc 	strheq	r0, [r0], -ip
 1bc:	0000bc04 	andeq	fp, r0, r4, lsl #24
 1c0:	0000d800 	andeq	sp, r0, r0, lsl #16
 1c4:	00510500 	subseq	r0, r1, r0, lsl #10
 1c8:	00630000 	rsbeq	r0, r3, r0
 1cc:	0001b50e 	andeq	fp, r1, lr, lsl #10
 1d0:	01720200 	cmneq	r2, r0, lsl #4
 1d4:	0000012e 	andeq	r0, r0, lr, lsr #2
 1d8:	c000937c 	andgt	r9, r0, ip, ror r3
 1dc:	0000004c 	andeq	r0, r0, ip, asr #32
 1e0:	012e9c01 			; <UNDEFINED> instruction: 0x012e9c01
 1e4:	62090000 	andvs	r0, r9, #0
 1e8:	02006675 	andeq	r6, r0, #122683392	; 0x7500000
 1ec:	01350172 	teqeq	r5, r2, ror r1
 1f0:	91020000 	mrsls	r0, (UNDEF: 2)
 1f4:	6d660960 			; <UNDEFINED> instruction: 0x6d660960
 1f8:	72020074 	andvc	r0, r2, #116	; 0x74
 1fc:	0000b601 	andeq	fp, r0, r1, lsl #12
 200:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 204:	019b0b0a 	orrseq	r0, fp, sl, lsl #22
 208:	74020000 	strvc	r0, [r2], #-0
 20c:	00003601 	andeq	r3, r0, r1, lsl #12
 210:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 214:	0200690f 	andeq	r6, r0, #245760	; 0x3c000
 218:	012e0175 			; <UNDEFINED> instruction: 0x012e0175
 21c:	91020000 	mrsls	r0, (UNDEF: 2)
 220:	04100068 	ldreq	r0, [r0], #-104	; 0xffffff98
 224:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 228:	bc040c00 	stclt	12, cr0, [r4], {-0}
 22c:	11000000 	mrsne	r0, (UNDEF: 0)
 230:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 234:	012ebb02 			; <UNDEFINED> instruction: 0x012ebb02
 238:	8ab40000 	bhi	fed00240 <__bss_end__+0x3ecf5e5c>
 23c:	08c8c000 	stmiaeq	r8, {lr, pc}^
 240:	9c010000 	stcls	0, cr0, [r1], {-0}
 244:	00000247 	andeq	r0, r0, r7, asr #4
 248:	66756212 			; <UNDEFINED> instruction: 0x66756212
 24c:	35bb0200 	ldrcc	r0, [fp, #512]!	; 0x200
 250:	02000001 	andeq	r0, r0, #1
 254:	66124491 			; <UNDEFINED> instruction: 0x66124491
 258:	0200746d 	andeq	r7, r0, #1828716544	; 0x6d000000
 25c:	0000b6bb 			; <UNDEFINED> instruction: 0x0000b6bb
 260:	40910200 	addsmi	r0, r1, r0, lsl #4
 264:	00019b13 	andeq	r9, r1, r3, lsl fp
 268:	36bb0200 	ldrtcc	r0, [fp], r0, lsl #4
 26c:	03000000 	movweq	r0, #0
 270:	147fbc91 	ldrbtne	fp, [pc], #-3217	; 278 <_start-0xc0007d88>
 274:	006e656c 	rsbeq	r6, lr, ip, ror #10
 278:	012ebd02 			; <UNDEFINED> instruction: 0x012ebd02
 27c:	91020000 	mrsls	r0, (UNDEF: 2)
 280:	756e1450 	strbvc	r1, [lr, #-1104]!	; 0xfffffbb0
 284:	c102006d 	tstgt	r2, sp, rrx
 288:	00000247 	andeq	r0, r0, r7, asr #4
 28c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
 290:	c3020069 	movwgt	r0, #8297	; 0x2069
 294:	0000012e 	andeq	r0, r0, lr, lsr #2
 298:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
 29c:	000000d9 	ldrdeq	r0, [r0], -r9
 2a0:	012ec302 			; <UNDEFINED> instruction: 0x012ec302
 2a4:	91020000 	mrsls	r0, (UNDEF: 2)
 2a8:	7473146c 	ldrbtvc	r1, [r3], #-1132	; 0xfffffb94
 2ac:	c4020072 	strgt	r0, [r2], #-114	; 0xffffff8e
 2b0:	00000135 	andeq	r0, r0, r5, lsr r1
 2b4:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
 2b8:	c5020073 	strgt	r0, [r2, #-115]	; 0xffffff8d
 2bc:	000000b6 	strheq	r0, [r0], -r6
 2c0:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
 2c4:	00000125 	andeq	r0, r0, r5, lsr #2
 2c8:	012ec702 			; <UNDEFINED> instruction: 0x012ec702
 2cc:	91020000 	mrsls	r0, (UNDEF: 2)
 2d0:	018f1560 	orreq	r1, pc, r0, ror #10
 2d4:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
 2d8:	0000012e 	andeq	r0, r0, lr, lsr #2
 2dc:	155c9102 	ldrbne	r9, [ip, #-258]	; 0xfffffefe
 2e0:	00000048 	andeq	r0, r0, r8, asr #32
 2e4:	012eca02 			; <UNDEFINED> instruction: 0x012eca02
 2e8:	91020000 	mrsls	r0, (UNDEF: 2)
 2ec:	01301558 	teqeq	r0, r8, asr r5
 2f0:	cc020000 	stcgt	0, cr0, [r2], {-0}
 2f4:	0000012e 	andeq	r0, r0, lr, lsr #2
 2f8:	16549102 	ldrbne	r9, [r4], -r2, lsl #2
 2fc:	00000150 	andeq	r0, r0, r0, asr r1
 300:	8b0cd602 	blhi	335b10 <_start-0xbfcd24f0>
 304:	2417c000 	ldrcs	ip, [r7], #-0
 308:	28c00091 	stmiacs	r0, {r0, r4, r7}^
 30c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 310:	0f000002 	svceq	0x00000002
 314:	02007069 	andeq	r7, r0, #105	; 0x69
 318:	024e0134 	subeq	r0, lr, #52, 2
 31c:	91020000 	mrsls	r0, (UNDEF: 2)
 320:	50180048 	andspl	r0, r8, r8, asr #32
 324:	28c00091 	stmiacs	r0, {r0, r4, r7}^
 328:	0f000000 	svceq	0x00000000
 32c:	02007069 	andeq	r7, r0, #105	; 0x69
 330:	025b0137 	subseq	r0, fp, #-1073741811	; 0xc000000d
 334:	91020000 	mrsls	r0, (UNDEF: 2)
 338:	0600004c 	streq	r0, [r0], -ip, asr #32
 33c:	00ec0704 	rsceq	r0, ip, r4, lsl #14
 340:	040c0000 	streq	r0, [ip], #-0
 344:	00000254 	andeq	r0, r0, r4, asr r2
 348:	a0050406 	andge	r0, r5, r6, lsl #8
 34c:	0c000001 	stceq	0, cr0, [r0], {1}
 350:	00012e04 	andeq	r2, r1, r4, lsl #28
 354:	01741900 	cmneq	r4, r0, lsl #18
 358:	b3020000 	movwlt	r0, #8192	; 0x2000
 35c:	00000051 	andeq	r0, r0, r1, asr r0
 360:	c0008a48 	andgt	r8, r0, r8, asr #20
 364:	0000006c 	andeq	r0, r0, ip, rrx
 368:	02a29c01 	adceq	r9, r2, #256	; 0x100
 36c:	73120000 	tstvc	r2, #0
 370:	b6b30200 	ldrtlt	r0, [r3], r0, lsl #4
 374:	02000000 	andeq	r0, r0, #0
 378:	29137491 	ldmdbcs	r3, {r0, r4, r7, sl, ip, sp, lr}
 37c:	02000000 	andeq	r0, r0, #0
 380:	000051b3 			; <UNDEFINED> instruction: 0x000051b3
 384:	70910200 	addsvc	r0, r1, r0, lsl #4
 388:	00637314 	rsbeq	r7, r3, r4, lsl r3
 38c:	00b6b502 	adcseq	fp, r6, r2, lsl #10
 390:	91020000 	mrsls	r0, (UNDEF: 2)
 394:	6d1a0078 	ldcvs	0, cr0, [sl, #-480]	; 0xfffffe20
 398:	02000001 	andeq	r0, r0, #1
 39c:	0001356e 	andeq	r3, r1, lr, ror #10
 3a0:	00866400 	addeq	r6, r6, r0, lsl #8
 3a4:	0003e4c0 	andeq	lr, r3, r0, asr #9
 3a8:	6f9c0100 	svcvs	0x009c0100
 3ac:	12000003 	andne	r0, r0, #3
 3b0:	00727473 	rsbseq	r7, r2, r3, ror r4
 3b4:	01356e02 	teqeq	r5, r2, lsl #28
 3b8:	91030000 	mrsls	r0, (UNDEF: 3)
 3bc:	6e127f9c 	mrcvs	15, 0, r7, cr2, cr12, {4}
 3c0:	02006d75 	andeq	r6, r0, #7488	; 0x1d40
 3c4:	0002546e 	andeq	r5, r2, lr, ror #8
 3c8:	98910300 	ldmls	r1, {r8, r9}
 3cc:	00d9137f 	sbcseq	r1, r9, pc, ror r3
 3d0:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
 3d4:	00000051 	andeq	r0, r0, r1, asr r0
 3d8:	7f949103 	svcvc	0x00949103
 3dc:	00012b13 	andeq	r2, r1, r3, lsl fp
 3e0:	2e6e0200 	cdpcs	2, 6, cr0, cr14, cr0, {0}
 3e4:	03000001 	movweq	r0, #1
 3e8:	137f9091 	cmnne	pc, #145	; 0x91
 3ec:	00000048 	andeq	r0, r0, r8, asr #32
 3f0:	012e6e02 			; <UNDEFINED> instruction: 0x012e6e02
 3f4:	91020000 	mrsls	r0, (UNDEF: 2)
 3f8:	017e1300 	cmneq	lr, r0, lsl #6
 3fc:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
 400:	0000012e 	andeq	r0, r0, lr, lsr #2
 404:	14049102 	strne	r9, [r4], #-258	; 0xfffffefe
 408:	71020063 	tstvc	r2, r3, rrx
 40c:	000000bc 	strheq	r0, [r0], -ip
 410:	156b9102 	strbne	r9, [fp, #-258]!	; 0xfffffefe
 414:	000001a9 	andeq	r0, r0, r9, lsr #3
 418:	00bc7102 	adcseq	r7, ip, r2, lsl #2
 41c:	91020000 	mrsls	r0, (UNDEF: 2)
 420:	6d741477 	cfldrdvs	mvd1, [r4, #-476]!	; 0xfffffe24
 424:	71020070 	tstvc	r2, r0, ror r0
 428:	0000036f 	andeq	r0, r0, pc, ror #6
 42c:	7fa09103 	svcvc	0x00a09103
 430:	00000015 	andeq	r0, r0, r5, lsl r0
 434:	b6720200 	ldrbtlt	r0, [r2], -r0, lsl #4
 438:	02000000 	andeq	r0, r0, #0
 43c:	69147091 	ldmdbvs	r4, {r0, r4, r7, ip, sp, lr}
 440:	2e730200 	cdpcs	2, 7, cr0, cr3, cr0, {0}
 444:	02000001 	andeq	r0, r0, #1
 448:	20186c91 	mulscs	r8, r1, ip
 44c:	34c00088 	strbcc	r0, [r0], #136	; 0x88
 450:	15000000 	strne	r0, [r0, #-0]
 454:	000001ae 	andeq	r0, r0, lr, lsr #3
 458:	012e9502 			; <UNDEFINED> instruction: 0x012e9502
 45c:	91020000 	mrsls	r0, (UNDEF: 2)
 460:	04000064 	streq	r0, [r0], #-100	; 0xffffff9c
 464:	000000bc 	strheq	r0, [r0], -ip
 468:	0000037f 	andeq	r0, r0, pc, ror r3
 46c:	00005105 	andeq	r5, r0, r5, lsl #2
 470:	1b004100 	blne	10878 <_start-0xbfff7788>
 474:	00000019 	andeq	r0, r0, r9, lsl r0
 478:	012e4902 			; <UNDEFINED> instruction: 0x012e4902
 47c:	85d00000 	ldrbhi	r0, [r0]
 480:	0094c000 	addseq	ip, r4, r0
 484:	9c010000 	stcls	0, cr0, [r1], {-0}
 488:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
 48c:	02007312 	andeq	r7, r0, #1207959552	; 0x48000000
 490:	0003b149 	andeq	fp, r3, r9, asr #2
 494:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 498:	02006914 	andeq	r6, r0, #20, 18	; 0x50000
 49c:	00012e4b 	andeq	r2, r1, fp, asr #28
 4a0:	78910200 	ldmvc	r1, {r9}
 4a4:	b6040c00 	strlt	r0, [r4], -r0, lsl #24
 4a8:	11000000 	mrsne	r0, (UNDEF: 0)
 4ac:	00000103 	andeq	r0, r0, r3, lsl #2
 4b0:	02542102 	subseq	r2, r4, #-2147483648	; 0x80000000
 4b4:	85640000 	strbhi	r0, [r4, #-0]!
 4b8:	006cc000 	rsbeq	ip, ip, r0
 4bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 4c0:	000003fa 	strdeq	r0, [r0], -sl
 4c4:	00706312 	rsbseq	r6, r0, r2, lsl r3
 4c8:	00b62102 	adcseq	r2, r6, r2, lsl #2
 4cc:	91020000 	mrsls	r0, (UNDEF: 2)
 4d0:	00fe1374 	rscseq	r1, lr, r4, ror r3
 4d4:	21020000 	mrscs	r0, (UNDEF: 2)
 4d8:	000003fa 	strdeq	r0, [r0], -sl
 4dc:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 4e0:	000000d9 	ldrdeq	r0, [r0], -r9
 4e4:	00512102 	subseq	r2, r1, r2, lsl #2
 4e8:	91020000 	mrsls	r0, (UNDEF: 2)
 4ec:	040c006c 	streq	r0, [ip], #-108	; 0xffffff94
 4f0:	00000135 	andeq	r0, r0, r5, lsr r1
 4f4:	00013a11 	andeq	r3, r1, r1, lsl sl
 4f8:	47060200 	strmi	r0, [r6, -r0, lsl #4]
 4fc:	ac000002 	stcge	0, cr0, [r0], {2}
 500:	b8c00083 	stmialt	r0, {r0, r1, r7}^
 504:	01000001 	tsteq	r0, r1
 508:	00045f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 50c:	70631200 	rsbvc	r1, r3, r0, lsl #4
 510:	b6060200 	strlt	r0, [r6], -r0, lsl #4
 514:	02000000 	andeq	r0, r0, #0
 518:	fe136c91 	mrc2	12, 0, r6, cr3, cr1, {4}
 51c:	02000000 	andeq	r0, r0, #0
 520:	0003fa06 	andeq	pc, r3, r6, lsl #20
 524:	68910200 	ldmvs	r1, {r9}
 528:	0000d913 	andeq	sp, r0, r3, lsl r9
 52c:	51060200 	mrspl	r0, LR_usr
 530:	02000000 	andeq	r0, r0, #0
 534:	49156491 	ldmdbmi	r5, {r0, r4, r7, sl, sp, lr}
 538:	02000001 	andeq	r0, r0, #1
 53c:	00024708 	andeq	r4, r2, r8, lsl #14
 540:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 544:	00002315 	andeq	r2, r0, r5, lsl r3
 548:	47080200 	strmi	r0, [r8, -r0, lsl #4]
 54c:	02000002 	andeq	r0, r0, #2
 550:	1c007091 	stcne	0, cr7, [r0], {145}	; 0x91
 554:	0000002f 	andeq	r0, r0, pc, lsr #32
 558:	00584401 	subseq	r4, r8, r1, lsl #8
 55c:	835c0000 	cmphi	ip, #0
 560:	0050c000 	subseq	ip, r0, r0
 564:	9c010000 	stcls	0, cr0, [r1], {-0}
 568:	01006312 	tsteq	r0, r2, lsl r3
 56c:	00005844 	andeq	r5, r0, r4, asr #16
 570:	78910200 	ldmvc	r1, {r9}
 574:	02140000 	andseq	r0, r4, #0
 578:	00040000 	andeq	r0, r4, r0
 57c:	000001f8 	strdeq	r0, [r0], -r8
 580:	00520104 	subseq	r0, r2, r4, lsl #2
 584:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
 588:	57000002 	strpl	r0, [r0, -r2]
 58c:	14000001 	strne	r0, [r0], #-1
 590:	dcc00094 	stclle	0, cr0, [r0], {148}	; 0x94
 594:	a2000002 	andge	r0, r0, #2
 598:	02000003 	andeq	r0, r0, #3
 59c:	ca040234 	bgt	100e74 <_start-0xbff0718c>
 5a0:	03000000 	movweq	r0, #0
 5a4:	000001f2 	strdeq	r0, [r0], -r2
 5a8:	00d10502 	sbcseq	r0, r1, r2, lsl #10
 5ac:	03000000 	movweq	r0, #0
 5b0:	0000022f 	andeq	r0, r0, pc, lsr #4
 5b4:	00d10602 	sbcseq	r0, r1, r2, lsl #12
 5b8:	03040000 	movweq	r0, #16384	; 0x4000
 5bc:	000001f8 	strdeq	r0, [r0], -r8
 5c0:	00d10702 	sbcseq	r0, r1, r2, lsl #14
 5c4:	03080000 	movweq	r0, #32768	; 0x8000
 5c8:	000001ec 	andeq	r0, r0, ip, ror #3
 5cc:	00d10802 	sbcseq	r0, r1, r2, lsl #16
 5d0:	040c0000 	streq	r0, [ip], #-0
 5d4:	00524449 	subseq	r4, r2, r9, asr #8
 5d8:	00d10902 	sbcseq	r0, r1, r2, lsl #18
 5dc:	04100000 	ldreq	r0, [r0], #-0
 5e0:	0052444f 	subseq	r4, r2, pc, asr #8
 5e4:	00d10a02 	sbcseq	r0, r1, r2, lsl #20
 5e8:	03140000 	tsteq	r4, #0
 5ec:	000001e7 	andeq	r0, r0, r7, ror #3
 5f0:	00d10b02 	sbcseq	r0, r1, r2, lsl #22
 5f4:	03180000 	tsteq	r8, #0
 5f8:	00000223 	andeq	r0, r0, r3, lsr #4
 5fc:	00d10c02 	sbcseq	r0, r1, r2, lsl #24
 600:	031c0000 	tsteq	ip, #0
 604:	00000236 	andeq	r0, r0, r6, lsr r2
 608:	00d10d02 	sbcseq	r0, r1, r2, lsl #26
 60c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 610:	00000247 	andeq	r0, r0, r7, asr #4
 614:	00d10e02 	sbcseq	r0, r1, r2, lsl #28
 618:	04240000 	strteq	r0, [r4], #-0
 61c:	00525242 	subseq	r5, r2, r2, asr #4
 620:	00d10f02 	sbcseq	r0, r1, r2, lsl #30
 624:	04280000 	strteq	r0, [r8], #-0
 628:	00736572 	rsbseq	r6, r3, r2, ror r5
 62c:	00d11002 	sbcseq	r1, r1, r2
 630:	032c0000 			; <UNDEFINED> instruction: 0x032c0000
 634:	000001c9 	andeq	r0, r0, r9, asr #3
 638:	00d11102 	sbcseq	r1, r1, r2, lsl #2
 63c:	00300000 	eorseq	r0, r0, r0
 640:	f1070405 			; <UNDEFINED> instruction: 0xf1070405
 644:	06000000 	streq	r0, [r0], -r0
 648:	000000ca 	andeq	r0, r0, sl, asr #1
 64c:	00021c07 	andeq	r1, r2, r7, lsl #24
 650:	25130200 	ldrcs	r0, [r3, #-512]	; 0xfffffe00
 654:	02000000 	andeq	r0, r0, #0
 658:	7a040330 	bvc	101320 <_start-0xbff06ce0>
 65c:	04000001 	streq	r0, [r0], #-1
 660:	00315243 	eorseq	r5, r1, r3, asr #4
 664:	00d10503 	sbcseq	r0, r1, r3, lsl #10
 668:	04000000 	streq	r0, [r0], #-0
 66c:	00325243 	eorseq	r5, r2, r3, asr #4
 670:	00d10603 	sbcseq	r0, r1, r3, lsl #12
 674:	04040000 	streq	r0, [r4], #-0
 678:	00335243 	eorseq	r5, r3, r3, asr #4
 67c:	00d10703 	sbcseq	r0, r1, r3, lsl #14
 680:	04080000 	streq	r0, [r8], #-0
 684:	00525242 	subseq	r5, r2, r2, asr #4
 688:	00d10803 	sbcseq	r0, r1, r3, lsl #16
 68c:	030c0000 	movweq	r0, #49152	; 0xc000
 690:	00000200 	andeq	r0, r0, r0, lsl #4
 694:	00d10903 	sbcseq	r0, r1, r3, lsl #18
 698:	03100000 	tsteq	r0, #0
 69c:	000001e2 	andeq	r0, r0, r2, ror #3
 6a0:	00d10a03 	sbcseq	r0, r1, r3, lsl #20
 6a4:	04140000 	ldreq	r0, [r4], #-0
 6a8:	00525152 	subseq	r5, r2, r2, asr r1
 6ac:	00d10b03 	sbcseq	r0, r1, r3, lsl #22
 6b0:	04180000 	ldreq	r0, [r8], #-0
 6b4:	00525349 	subseq	r5, r2, r9, asr #6
 6b8:	00d10c03 	sbcseq	r0, r1, r3, lsl #24
 6bc:	041c0000 	ldreq	r0, [ip], #-0
 6c0:	00524349 	subseq	r4, r2, r9, asr #6
 6c4:	00d10d03 	sbcseq	r0, r1, r3, lsl #26
 6c8:	04200000 	strteq	r0, [r0], #-0
 6cc:	00524452 	subseq	r4, r2, r2, asr r4
 6d0:	00d10e03 	sbcseq	r0, r1, r3, lsl #28
 6d4:	04240000 	strteq	r0, [r4], #-0
 6d8:	00524454 	subseq	r4, r2, r4, asr r4
 6dc:	00d10f03 	sbcseq	r0, r1, r3, lsl #30
 6e0:	03280000 			; <UNDEFINED> instruction: 0x03280000
 6e4:	00000205 	andeq	r0, r0, r5, lsl #4
 6e8:	00d11003 	sbcseq	r1, r1, r3
 6ec:	002c0000 	eoreq	r0, ip, r0
 6f0:	00022807 	andeq	r2, r2, r7, lsl #16
 6f4:	e1110300 	tst	r1, r0, lsl #6
 6f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 6fc:	0000023b 	andeq	r0, r0, fp, lsr r2
 700:	01ac3001 			; <UNDEFINED> instruction: 0x01ac3001
 704:	96a40000 	strtls	r0, [r4], r0
 708:	004cc000 	subeq	ip, ip, r0
 70c:	9c010000 	stcls	0, cr0, [r1], {-0}
 710:	000001ac 	andeq	r0, r0, ip, lsr #3
 714:	00686309 	rsbeq	r6, r8, r9, lsl #6
 718:	01ac3201 			; <UNDEFINED> instruction: 0x01ac3201
 71c:	91020000 	mrsls	r0, (UNDEF: 2)
 720:	0105007b 	tsteq	r5, fp, ror r0
 724:	0000e708 	andeq	lr, r0, r8, lsl #14
 728:	01ac0a00 			; <UNDEFINED> instruction: 0x01ac0a00
 72c:	d10b0000 	mrsle	r0, (UNDEF: 11)
 730:	01000001 	tsteq	r0, r1
 734:	00965c2a 	addseq	r5, r6, sl, lsr #24
 738:	000048c0 	andeq	r4, r0, r0, asr #17
 73c:	dc9c0100 	ldfles	f0, [ip], {0}
 740:	0c000001 	stceq	0, cr0, [r0], {1}
 744:	0000020b 	andeq	r0, r0, fp, lsl #4
 748:	01dc2a01 	bicseq	r2, ip, r1, lsl #20
 74c:	91020000 	mrsls	r0, (UNDEF: 2)
 750:	040d0074 	streq	r0, [sp], #-116	; 0xffffff8c
 754:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
 758:	0001bd0b 	andeq	fp, r1, fp, lsl #26
 75c:	fc230100 	stc2	1, cr0, [r3], #-0
 760:	60c00095 	smullvs	r0, r0, r5, r0	; <UNPREDICTABLE>
 764:	01000000 	mrseq	r0, (UNDEF: 0)
 768:	0002069c 	muleq	r2, ip, r6
 76c:	01dd0c00 	bicseq	r0, sp, r0, lsl #24
 770:	23010000 	movwcs	r0, #4096	; 0x1000
 774:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
 778:	00749102 	rsbseq	r9, r4, r2, lsl #2
 77c:	0002100e 	andeq	r1, r2, lr
 780:	14050100 	strne	r0, [r5], #-256	; 0xffffff00
 784:	e8c00094 	stmia	r0, {r2, r4, r7}^
 788:	01000001 	tsteq	r0, r1
 78c:	0049009c 	umaaleq	r0, r9, ip, r0
 790:	00040000 	andeq	r0, r4, r0
 794:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 798:	00520104 	subseq	r0, r2, r4, lsl #2
 79c:	650c0000 	strvs	r0, [ip, #-0]
 7a0:	57000002 	strpl	r0, [r0, -r2]
 7a4:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
 7a8:	18c00096 	stmiane	r0, {r1, r2, r4, r7}^
 7ac:	4c000000 	stcmi	0, cr0, [r0], {-0}
 7b0:	02000004 	andeq	r0, r0, #4
 7b4:	02010069 	andeq	r0, r1, #105	; 0x69
 7b8:	00000034 	andeq	r0, r0, r4, lsr r0
 7bc:	a3e00305 	mvnge	r0, #335544320	; 0x14000000
 7c0:	0403c000 	streq	ip, [r3], #-0
 7c4:	0000f107 	andeq	pc, r0, r7, lsl #2
 7c8:	025e0400 	subseq	r0, lr, #0, 8
 7cc:	03010000 	movweq	r0, #4096	; 0x1000
 7d0:	c00096f0 	strdgt	r9, [r0], -r0
 7d4:	00000018 	andeq	r0, r0, r8, lsl r0
 7d8:	e9009c01 	stmdb	r0, {r0, sl, fp, ip, pc}
 7dc:	04000000 	streq	r0, [r0], #-0
 7e0:	00031800 	andeq	r1, r3, r0, lsl #16
 7e4:	52010400 	andpl	r0, r1, #0, 8
 7e8:	0c000000 	stceq	0, cr0, [r0], {-0}
 7ec:	00000283 	andeq	r0, r0, r3, lsl #5
 7f0:	00000157 	andeq	r0, r0, r7, asr r1
 7f4:	c0009708 	andgt	r9, r0, r8, lsl #14
 7f8:	0000036c 	andeq	r0, r0, ip, ror #6
 7fc:	00000487 	andeq	r0, r0, r7, lsl #9
 800:	05021802 	streq	r1, [r2, #-2050]	; 0xfffff7fe
 804:	00000076 	andeq	r0, r0, r6, ror r0
 808:	00027d03 	andeq	r7, r2, r3, lsl #26
 80c:	76060200 	strvc	r0, [r6], -r0, lsl #4
 810:	00000000 	andeq	r0, r0, r0
 814:	0002a003 	andeq	sl, r2, r3
 818:	76070200 	strvc	r0, [r7], -r0, lsl #4
 81c:	04000000 	streq	r0, [r0], #-0
 820:	0002a703 	andeq	sl, r2, r3, lsl #14
 824:	76080200 	strvc	r0, [r8], -r0, lsl #4
 828:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 82c:	00028d03 	andeq	r8, r2, r3, lsl #26
 830:	76090200 	strvc	r0, [r9], -r0, lsl #4
 834:	0c000000 	stceq	0, cr0, [r0], {-0}
 838:	72646904 	rsbvc	r6, r4, #4, 18	; 0x10000
 83c:	760a0200 	strvc	r0, [sl], -r0, lsl #4
 840:	10000000 	andne	r0, r0, r0
 844:	72646f04 	rsbvc	r6, r4, #4, 30
 848:	760b0200 	strvc	r0, [fp], -r0, lsl #4
 84c:	14000000 	strne	r0, [r0], #-0
 850:	07040500 	streq	r0, [r4, -r0, lsl #10]
 854:	000000f1 	strdeq	r0, [r0], -r1
 858:	00021c06 	andeq	r1, r2, r6, lsl #24
 85c:	250c0200 	strcs	r0, [ip, #-512]	; 0xfffffe00
 860:	07000000 	streq	r0, [r0, -r0]
 864:	000002af 	andeq	r0, r0, pc, lsr #5
 868:	99502001 	ldmdbls	r0, {r0, sp}^
 86c:	0124c000 			; <UNDEFINED> instruction: 0x0124c000
 870:	9c010000 	stcls	0, cr0, [r1], {-0}
 874:	00029308 	andeq	r9, r2, r8, lsl #6
 878:	780a0100 	stmdavc	sl, {r8}
 87c:	d8c00097 	stmiale	r0, {r0, r1, r2, r4, r7}^
 880:	01000001 	tsteq	r0, r1
 884:	02bd099c 	adcseq	r0, sp, #156, 18	; 0x270000
 888:	03010000 	movweq	r0, #4096	; 0x1000
 88c:	c0009708 	andgt	r9, r0, r8, lsl #14
 890:	00000070 	andeq	r0, r0, r0, ror r0
 894:	00e59c01 	rsceq	r9, r5, r1, lsl #24
 898:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
 89c:	03010073 	movweq	r0, #4211	; 0x1073
 8a0:	000000e5 	andeq	r0, r0, r5, ror #1
 8a4:	0b709102 	bleq	1c24cb4 <_start-0xbe3e334c>
 8a8:	05010069 	streq	r0, [r1, #-105]	; 0xffffff97
 8ac:	000000e5 	andeq	r0, r0, r5, ror #1
 8b0:	0b789102 	bleq	1e24cc0 <_start-0xbe1e3340>
 8b4:	0501006a 	streq	r0, [r1, #-106]	; 0xffffff96
 8b8:	000000e5 	andeq	r0, r0, r5, ror #1
 8bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8c0:	6905040c 	stmdbvs	r5, {r2, r3, sl}
 8c4:	0000746e 	andeq	r7, r0, lr, ror #8
 8c8:	00000045 	andeq	r0, r0, r5, asr #32
 8cc:	03de0004 	bicseq	r0, lr, #4
 8d0:	01040000 	mrseq	r0, (UNDEF: 4)
 8d4:	00000052 	andeq	r0, r0, r2, asr r0
 8d8:	0002c60c 	andeq	ip, r2, ip, lsl #12
 8dc:	00015700 	andeq	r5, r1, r0, lsl #14
 8e0:	009a7400 	addseq	r7, sl, r0, lsl #8
 8e4:	000014c0 	andeq	r1, r0, r0, asr #9
 8e8:	00050c00 	andeq	r0, r5, r0, lsl #24
 8ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
 8f0:	000000f1 	strdeq	r0, [r0], -r1
 8f4:	0002cd03 	andeq	ip, r2, r3, lsl #26
 8f8:	41020100 	mrsmi	r0, (UNDEF: 18)
 8fc:	74000000 	strvc	r0, [r0], #-0
 900:	14c0009a 	strbne	r0, [r0], #154	; 0x9a
 904:	01000000 	mrseq	r0, (UNDEF: 0)
 908:	0504049c 	streq	r0, [r4, #-1180]	; 0xfffffb64
 90c:	00746e69 	rsbseq	r6, r4, r9, ror #28
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <_start-0xbfe073ec>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	10001101 	andne	r1, r0, r1, lsl #2
  18:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  1c:	1b080301 	blne	200c28 <_start-0xbfe073d8>
  20:	13082508 	movwne	r2, #34056	; 0x8508
  24:	00000005 	andeq	r0, r0, r5
  28:	10001101 	andne	r1, r0, r1, lsl #2
  2c:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  30:	1b080301 	blne	200c3c <_start-0xbfe073c4>
  34:	13082508 	movwne	r2, #34056	; 0x8508
  38:	00000005 	andeq	r0, r0, r5
  3c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  40:	030b130e 	movweq	r1, #45838	; 0xb30e
  44:	110e1b0e 	tstne	lr, lr, lsl #22
  48:	10061201 	andne	r1, r6, r1, lsl #4
  4c:	02000017 	andeq	r0, r0, #23
  50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <_start-0xbf1452bc>
  58:	00001349 	andeq	r1, r0, r9, asr #6
  5c:	0b000f03 	bleq	3c70 <_start-0xc0004390>
  60:	000e030b 	andeq	r0, lr, fp, lsl #6
  64:	01010400 	tsteq	r1, r0, lsl #8
  68:	13011349 	movwne	r1, #4937	; 0x1349
  6c:	21050000 	mrscs	r0, (UNDEF: 5)
  70:	2f134900 	svccs	0x00134900
  74:	0600000b 	streq	r0, [r0], -fp
  78:	0b0b0024 	bleq	2c0110 <_start-0xbfd47ef0>
  7c:	0e030b3e 	vmoveq.16	d3[0], r0
  80:	34070000 	strcc	r0, [r7], #-0
  84:	3a0e0300 	bcc	380c8c <_start-0xbfc87374>
  88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  8c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  90:	08000018 	stmdaeq	r0, {r3, r4}
  94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  98:	0b3a0e03 	bleq	e838ac <_start-0xbf184754>
  9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050900 	andeq	r0, r5, r0, lsl #18
  b0:	0b3a0803 	bleq	e820c4 <_start-0xbf185f3c>
  b4:	1349053b 	movtne	r0, #38203	; 0x953b
  b8:	00001802 	andeq	r1, r0, r2, lsl #16
  bc:	0000180a 	andeq	r1, r0, sl, lsl #16
  c0:	00340b00 	eorseq	r0, r4, r0, lsl #22
  c4:	0b3a0e03 	bleq	e838d8 <_start-0xbf184728>
  c8:	1349053b 	movtne	r0, #38203	; 0x953b
  cc:	00001802 	andeq	r1, r0, r2, lsl #16
  d0:	0b000f0c 	bleq	3d08 <_start-0xc00042f8>
  d4:	0013490b 	andseq	r4, r3, fp, lsl #18
  d8:	00260d00 	eoreq	r0, r6, r0, lsl #26
  dc:	00001349 	andeq	r1, r0, r9, asr #6
  e0:	3f012e0e 	svccc	0x00012e0e
  e4:	3a0e0319 	bcc	380d50 <_start-0xbfc872b0>
  e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  ec:	11134919 	tstne	r3, r9, lsl r9
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	0300340f 	movweq	r3, #1039	; 0x40f
 100:	3b0b3a08 	blcc	2ce928 <_start-0xbfd396d8>
 104:	02134905 	andseq	r4, r3, #81920	; 0x14000
 108:	10000018 	andne	r0, r0, r8, lsl r0
 10c:	0b0b0024 	bleq	2c01a4 <_start-0xbfd47e5c>
 110:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 114:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <_start-0xbfd396a4>
 120:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 124:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	05120000 	ldreq	r0, [r2, #-0]
 134:	3a080300 	bcc	200d3c <_start-0xbfe072c4>
 138:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	00180213 	andseq	r0, r8, r3, lsl r2
 140:	00051300 	andeq	r1, r5, r0, lsl #6
 144:	0b3a0e03 	bleq	e83958 <_start-0xbf1846a8>
 148:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	03003414 	movweq	r3, #1044	; 0x414
 154:	3b0b3a08 	blcc	2ce97c <_start-0xbfd39684>
 158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 15c:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <_start-0xbf1451ac>
 168:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 16c:	0a160000 	beq	580174 <_start-0xbfa87e8c>
 170:	3a0e0300 	bcc	380d78 <_start-0xbfc87288>
 174:	110b3b0b 	tstne	fp, fp, lsl #22
 178:	17000001 	strne	r0, [r0, -r1]
 17c:	0111010b 	tsteq	r1, fp, lsl #2
 180:	13010612 	movwne	r0, #5650	; 0x1612
 184:	0b180000 	bleq	60018c <_start-0xbfa07e74>
 188:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 18c:	19000006 	stmdbne	r0, {r1, r2}
 190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <_start-0xbf184658>
 198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 19c:	01111349 	tsteq	r1, r9, asr #6
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1a8:	1a000013 	bne	1fc <_start-0xc0007e04>
 1ac:	0e03012e 	adfeqsp	f0, f3, #0.5
 1b0:	0b3b0b3a 	bleq	ec2ea0 <_start-0xbf145160>
 1b4:	13491927 	movtne	r1, #39207	; 0x9927
 1b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1c0:	00130119 	andseq	r0, r3, r9, lsl r1
 1c4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 1c8:	0b3a0e03 	bleq	e839dc <_start-0xbf184624>
 1cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d0:	01111349 	tsteq	r1, r9, asr #6
 1d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1dc:	1c000013 	stcne	0, cr0, [r0], {19}
 1e0:	0e03012e 	adfeqsp	f0, f3, #0.5
 1e4:	0b3b0b3a 	bleq	ec2ed4 <_start-0xbf14512c>
 1e8:	13491927 	movtne	r1, #39207	; 0x9927
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1f4:	00000019 	andeq	r0, r0, r9, lsl r0
 1f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1fc:	030b130e 	movweq	r1, #45838	; 0xb30e
 200:	110e1b0e 	tstne	lr, lr, lsl #22
 204:	10061201 	andne	r1, r6, r1, lsl #4
 208:	02000017 	andeq	r0, r0, #23
 20c:	0b0b0113 	bleq	2c0660 <_start-0xbfd479a0>
 210:	0b3b0b3a 	bleq	ec2f00 <_start-0xbf145100>
 214:	00001301 	andeq	r1, r0, r1, lsl #6
 218:	03000d03 	movweq	r0, #3331	; 0xd03
 21c:	3b0b3a0e 	blcc	2cea5c <_start-0xbfd395a4>
 220:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 224:	0400000b 	streq	r0, [r0], #-11
 228:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 22c:	0b3b0b3a 	bleq	ec2f1c <_start-0xbf1450e4>
 230:	0b381349 	bleq	e04f5c <_start-0xbf2030a4>
 234:	24050000 	strcs	r0, [r5], #-0
 238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 23c:	000e030b 	andeq	r0, lr, fp, lsl #6
 240:	00350600 	eorseq	r0, r5, r0, lsl #12
 244:	00001349 	andeq	r1, r0, r9, asr #6
 248:	03001607 	movweq	r1, #1543	; 0x607
 24c:	3b0b3a0e 	blcc	2cea8c <_start-0xbfd39574>
 250:	0013490b 	andseq	r4, r3, fp, lsl #18
 254:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <_start-0xbf1450b4>
 260:	13491927 	movtne	r1, #39207	; 0x9927
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 26c:	00130119 	andseq	r0, r3, r9, lsl r1
 270:	00340900 	eorseq	r0, r4, r0, lsl #18
 274:	0b3a0803 	bleq	e82288 <_start-0xbf185d78>
 278:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
 284:	0b000013 	bleq	2d8 <_start-0xc0007d28>
 288:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 28c:	0b3a0e03 	bleq	e83aa0 <_start-0xbf184560>
 290:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <_start-0xbf184548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	0b000f0d 	bleq	3eec <_start-0xc0004114>
 2b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2b8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <_start-0xbf145050>
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00000019 	andeq	r0, r0, r9, lsl r0
 2d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2d4:	030b130e 	movweq	r1, #45838	; 0xb30e
 2d8:	110e1b0e 	tstne	lr, lr, lsl #22
 2dc:	10061201 	andne	r1, r6, r1, lsl #4
 2e0:	02000017 	andeq	r0, r0, #23
 2e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2e8:	0b3b0b3a 	bleq	ec2fd8 <_start-0xbf145028>
 2ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2f0:	00001802 	andeq	r1, r0, r2, lsl #16
 2f4:	0b002403 	bleq	9308 <_start-0xbfffecf8>
 2f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2fc:	0400000e 	streq	r0, [r0], #-14
 300:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 304:	0b3a0e03 	bleq	e83b18 <_start-0xbf1844e8>
 308:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 30c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 310:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 314:	00000019 	andeq	r0, r0, r9, lsl r0
 318:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 31c:	030b130e 	movweq	r1, #45838	; 0xb30e
 320:	110e1b0e 	tstne	lr, lr, lsl #22
 324:	10061201 	andne	r1, r6, r1, lsl #4
 328:	02000017 	andeq	r0, r0, #23
 32c:	0b0b0113 	bleq	2c0780 <_start-0xbfd47880>
 330:	0b3b0b3a 	bleq	ec3020 <_start-0xbf144fe0>
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	03000d03 	movweq	r0, #3331	; 0xd03
 33c:	3b0b3a0e 	blcc	2ceb7c <_start-0xbfd39484>
 340:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 344:	0400000b 	streq	r0, [r0], #-11
 348:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 34c:	0b3b0b3a 	bleq	ec303c <_start-0xbf144fc4>
 350:	0b381349 	bleq	e0507c <_start-0xbf202f84>
 354:	24050000 	strcs	r0, [r5], #-0
 358:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 35c:	000e030b 	andeq	r0, lr, fp, lsl #6
 360:	00160600 	andseq	r0, r6, r0, lsl #12
 364:	0b3a0e03 	bleq	e83b78 <_start-0xbf184488>
 368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 36c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 370:	03193f00 	tsteq	r9, #0, 30
 374:	3b0b3a0e 	blcc	2cebb4 <_start-0xbfd3944c>
 378:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 37c:	96184006 	ldrls	r4, [r8], -r6
 380:	00001942 	andeq	r1, r0, r2, asr #18
 384:	3f002e08 	svccc	0x00002e08
 388:	3a0e0319 	bcc	380ff4 <_start-0xbfc8700c>
 38c:	110b3b0b 	tstne	fp, fp, lsl #22
 390:	40061201 	andmi	r1, r6, r1, lsl #4
 394:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 398:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 39c:	03193f01 	tsteq	r9, #1, 30
 3a0:	3b0b3a0e 	blcc	2cebe0 <_start-0xbfd39420>
 3a4:	1119270b 	tstne	r9, fp, lsl #14
 3a8:	40061201 	andmi	r1, r6, r1, lsl #4
 3ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3b0:	00001301 	andeq	r1, r0, r1, lsl #6
 3b4:	0300050a 	movweq	r0, #1290	; 0x50a
 3b8:	3b0b3a08 	blcc	2cebe0 <_start-0xbfd39420>
 3bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3c0:	0b000018 	bleq	428 <_start-0xc0007bd8>
 3c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 3c8:	0b3b0b3a 	bleq	ec30b8 <_start-0xbf144f48>
 3cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3d0:	240c0000 	strcs	r0, [ip], #-0
 3d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3d8:	0008030b 	andeq	r0, r8, fp, lsl #6
 3dc:	11010000 	mrsne	r0, (UNDEF: 1)
 3e0:	130e2501 	movwne	r2, #58625	; 0xe501
 3e4:	1b0e030b 	blne	381018 <_start-0xbfc86fe8>
 3e8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3ec:	00171006 	andseq	r1, r7, r6
 3f0:	00240200 	eoreq	r0, r4, r0, lsl #4
 3f4:	0b3e0b0b 	bleq	f83028 <_start-0xbf084fd8>
 3f8:	00000e03 	andeq	r0, r0, r3, lsl #28
 3fc:	3f002e03 	svccc	0x00002e03
 400:	3a0e0319 	bcc	38106c <_start-0xbfc86f94>
 404:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 408:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 40c:	96184006 	ldrls	r4, [r8], -r6
 410:	00001942 	andeq	r1, r0, r2, asr #18
 414:	0b002404 	bleq	942c <_start-0xbfffebd4>
 418:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 41c:	00000008 	andeq	r0, r0, r8

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	c0008000 	andgt	r8, r0, r0
  14:	00000218 	andeq	r0, r0, r8, lsl r2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	004c0002 	subeq	r0, ip, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	c0008218 	andgt	r8, r0, r8, lsl r2
  34:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00a00002 	adceq	r0, r0, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	c00082c8 	andgt	r8, r0, r8, asr #5
  54:	00000094 	muleq	r0, r4, r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00f40002 	rscseq	r0, r4, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	c000835c 	andgt	r8, r0, ip, asr r3
  74:	000010b8 	strheq	r1, [r0], -r8
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	05760002 	ldrbeq	r0, [r6, #-2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	c0009414 	andgt	r9, r0, r4, lsl r4
  94:	000002dc 	ldrdeq	r0, [r0], -ip
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	078e0002 	streq	r0, [lr, r2]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	c00096f0 	strdgt	r9, [r0], -r0
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	07db0002 	ldrbeq	r0, [fp, r2]
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	c0009708 	andgt	r9, r0, r8, lsl #14
  d4:	0000036c 	andeq	r0, r0, ip, ror #6
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	08c80002 	stmiaeq	r8, {r1}^
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	c0009a74 	andgt	r9, r0, r4, ror sl
  f4:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	5f007374 	svcpl	0x00007374
   8:	6975625f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
   c:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  10:	5f61765f 	svcpl	0x0061765f
  14:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
  18:	696b7300 	stmdbvs	fp!, {r8, r9, ip, sp, lr}^
  1c:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
  20:	7600696f 	strvc	r6, [r0], -pc, ror #18
  24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  28:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffd30 <__bss_end__+0x3fff594c>
  2c:	5f00746e 	svcpl	0x0000746e
  30:	756f745f 	strbvc	r7, [pc, #-1119]!	; fffffbd9 <__bss_end__+0x3fff57f5>
  34:	72657070 	rsbvc	r7, r5, #112	; 0x70
  38:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
  3c:	5f63756e 	svcpl	0x0063756e
  40:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
  44:	00747369 	rsbseq	r7, r4, r9, ror #6
  48:	63657270 	cmnvs	r5, #112, 4
  4c:	6f697369 	svcvs	0x00697369
  50:	4e47006e 	cdpmi	0, 4, cr0, cr7, cr14, {3}
  54:	31432055 	qdaddcc	r2, r5, r3
  58:	2e372031 	mrccs	0, 1, r2, cr7, cr1, {1}
  5c:	20302e35 	eorscs	r2, r0, r5, lsr lr
  60:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  64:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	73637061 	cmnvc	r3, #97	; 0x61
  70:	756e672d 	strbvc	r6, [lr, #-1837]!	; 0xfffff8d3
  74:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  78:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
  7c:	206e6f65 	rsbcs	r6, lr, r5, ror #30
  80:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  84:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  88:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  8c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  90:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
  94:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  98:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  9c:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
  a0:	6d2d2061 	stcvs	0, cr2, [sp, #-388]!	; 0xfffffe7c
  a4:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
  a8:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
  ac:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  b0:	2d203961 			; <UNDEFINED> instruction: 0x2d203961
  b4:	736c746d 	cmnvc	ip, #1828716544	; 0x6d000000
  b8:	6169642d 	cmnvs	r9, sp, lsr #8
  bc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  c0:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0xfffff8c3
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  cc:	6f6e662d 	svcvs	0x006e662d
  d0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
  d4:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  d8:	73616200 	cmnvc	r1, #0, 4
  dc:	6e750065 	cdpvs	0, 7, cr0, cr5, cr5, {3}
  e0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  e4:	63206465 			; <UNDEFINED> instruction: 0x63206465
  e8:	00726168 	rsbseq	r6, r2, r8, ror #2
  ec:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  f0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  f4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  f8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  fc:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
 100:	73007064 	movwvc	r7, #100	; 0x64
 104:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
 108:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 10c:	6c6f7472 	cfstrdvs	mvd7, [pc], #-456	; ffffff4c <__bss_end__+0x3fff5b68>
 110:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 118 <_start-0xc0007ee8>
 114:	2f6e6f6d 	svccs	0x006e6f6d
 118:	2f637273 	svccs	0x00637273
 11c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 120:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
 124:	616c6600 	cmnvs	ip, r0, lsl #12
 128:	73007367 	movwvc	r7, #871	; 0x367
 12c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 130:	6c617571 	cfstr64vs	mvdx7, [r1], #-452	; 0xfffffe3c
 134:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 138:	69730072 	ldmdbvs	r3!, {r1, r4, r5, r6}^
 13c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
 140:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 144:	6c756f74 	ldclvs	15, cr6, [r5], #-464	; 0xfffffe30
 148:	73657200 	cmnvc	r5, #0, 4
 14c:	00746c75 	rsbseq	r6, r4, r5, ror ip
 150:	65706572 	ldrbvs	r6, [r0, #-1394]!	; 0xfffffa8e
 154:	2f007461 	svccs	0x00007461
 158:	2f746e6d 	svccs	0x00746e6d
 15c:	73666768 	cmnvc	r6, #104, 14	; 0x1a00000
 160:	6168732f 	cmnvs	r8, pc, lsr #6
 164:	2f316572 	svccs	0x00316572
 168:	632d3230 			; <UNDEFINED> instruction: 0x632d3230
 16c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 170:	00726562 	rsbseq	r6, r2, r2, ror #10
 174:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
 178:	006e656c 	rsbeq	r6, lr, ip, ror #10
 17c:	7974635f 	ldmdbvc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
 180:	70006570 	andvc	r6, r0, r0, ror r5
 184:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 188:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 18c:	66007265 	strvs	r7, [r0], -r5, ror #4
 190:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
 194:	6469775f 	strbtvs	r7, [r9], #-1887	; 0xfffff8a1
 198:	61006874 	tstvs	r0, r4, ror r8
 19c:	00736772 	rsbseq	r6, r3, r2, ror r7
 1a0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 1a4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 1a8:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
 1ac:	5f5f006e 	svcpl	0x005f006e
 1b0:	00736572 	rsbseq	r6, r3, r2, ror r5
 1b4:	72707376 	rsbsvc	r7, r0, #-671088639	; 0xd8000001
 1b8:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
 1bc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff2c4 <__bss_end__+0x3fff4ee0>
 1c0:	5f747261 	svcpl	0x00747261
 1c4:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 1c8:	43455300 	movtmi	r5, #21248	; 0x5300
 1cc:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 1d0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff2d8 <__bss_end__+0x3fff4ef4>
 1d4:	5f747261 	svcpl	0x00747261
 1d8:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 1dc:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
 1e0:	54520061 	ldrbpl	r0, [r2], #-97	; 0xffffff9f
 1e4:	4200524f 	andmi	r5, r0, #-268435452	; 0xf0000004
 1e8:	00525253 	subseq	r5, r2, r3, asr r2
 1ec:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 1f0:	4f4d0052 	svcmi	0x004d0052
 1f4:	00524544 	subseq	r4, r2, r4, asr #10
 1f8:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
 1fc:	00524445 	subseq	r4, r2, r5, asr #8
 200:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
 204:	45525000 	ldrbmi	r5, [r2, #-0]
 208:	70004353 	andvc	r4, r0, r3, asr r3
 20c:	00727473 	rsbseq	r7, r2, r3, ror r4
 210:	61755f5f 	cmnvs	r5, pc, asr pc
 214:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 218:	0074696e 	rsbseq	r6, r4, lr, ror #18
 21c:	6f697067 	svcvs	0x00697067
 220:	4c00745f 	cfstrsmi	mvf7, [r0], {95}	; 0x5f
 224:	00524b43 	subseq	r4, r2, r3, asr #22
 228:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 22c:	4f00745f 	svcmi	0x0000745f
 230:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 234:	46410052 			; <UNDEFINED> instruction: 0x46410052
 238:	5f004c52 	svcpl	0x00004c52
 23c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 240:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
 244:	41006374 	tstmi	r0, r4, ror r3
 248:	00485246 	subeq	r5, r8, r6, asr #4
 24c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 250:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
 254:	752f6372 	strvc	r6, [pc, #-882]!	; fffffeea <__bss_end__+0x3fff5b06>
 258:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 25c:	6f640063 	svcvs	0x00640063
 260:	7172695f 	cmnvc	r2, pc, asr r9
 264:	63727300 	cmnvs	r2, #0, 6
 268:	5f6f642f 	svcpl	0x006f642f
 26c:	2e717269 	cdpcs	2, 7, cr7, cr1, cr9, {3}
 270:	72730063 	rsbsvc	r0, r3, #99	; 0x63
 274:	70672f63 	rsbvc	r2, r7, r3, ror #30
 278:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 27c:	646f6d00 	strbtvs	r6, [pc], #-3328	; 284 <_start-0xc0007d7c>
 280:	73007265 	movwvc	r7, #613	; 0x265
 284:	6c2f6372 	stcvs	3, cr6, [pc], #-456	; c4 <_start-0xc0007f3c>
 288:	632e6465 			; <UNDEFINED> instruction: 0x632e6465
 28c:	70757000 	rsbsvc	r7, r5, r0
 290:	61007264 	tstvs	r0, r4, ror #4
 294:	6c5f6c6c 	mrrcvs	12, 6, r6, pc, cr12	; <UNPREDICTABLE>
 298:	695f6465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
 29c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 2a0:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 2a4:	6f007265 	svcvs	0x00007265
 2a8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2ac:	61007264 	tstvs	r0, r4, ror #4
 2b0:	6c5f6c6c 	mrrcvs	12, 6, r6, pc, cr12	; <UNPREDICTABLE>
 2b4:	665f6465 	ldrbvs	r6, [pc], -r5, ror #8
 2b8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
 2bc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2c0:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 206 <_start-0xc0007dfa>	; <UNPREDICTABLE>
 2c4:	616d0073 	smcvs	53251	; 0xd003
 2c8:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 2cc:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 2d0:	地址 0x000002d0 越界。


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	c000835c 	andgt	r8, r0, ip, asr r3
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	8b040e42 	blhi	103930 <_start-0xbff046d0>
  24:	0b0d4201 	bleq	350830 <_start-0xbfcb77d0>
  28:	420d0d60 	andmi	r0, sp, #96, 26	; 0x1800
  2c:	00000ecb 	andeq	r0, r0, fp, asr #29
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	c00083ac 	andgt	r8, r0, ip, lsr #7
  3c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  40:	8b080e42 	blhi	203950 <_start-0xbfe046b0>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  4c:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	c0008564 	andgt	r8, r0, r4, ror #10
  5c:	0000006c 	andeq	r0, r0, ip, rrx
  60:	8b080e42 	blhi	203970 <_start-0xbfe04690>
  64:	42018e02 	andmi	r8, r1, #2, 28
  68:	70040b0c 	andvc	r0, r4, ip, lsl #22
  6c:	00080d0c 	andeq	r0, r8, ip, lsl #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	c00085d0 	ldrdgt	r8, [r0], -r0
  7c:	00000094 	muleq	r0, r4, r0
  80:	8b040e42 	blhi	103990 <_start-0xbff04670>
  84:	0b0d4201 	bleq	350890 <_start-0xbfcb7770>
  88:	0d0d4202 	sfmeq	f4, 4, [sp, #-8]
  8c:	000ecb42 	andeq	ip, lr, r2, asr #22
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	00000000 	andeq	r0, r0, r0
  98:	c0008664 	andgt	r8, r0, r4, ror #12
  9c:	000003e4 	andeq	r0, r0, r4, ror #7
  a0:	8b080e42 	blhi	2039b0 <_start-0xbfe04650>
  a4:	42018e02 	andmi	r8, r1, #2, 28
  a8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  ac:	0d0c01ec 	stfeqs	f0, [ip, #-944]	; 0xfffffc50
  b0:	00000008 	andeq	r0, r0, r8
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	c0008a48 	andgt	r8, r0, r8, asr #20
  c0:	0000006c 	andeq	r0, r0, ip, rrx
  c4:	8b040e42 	blhi	1039d4 <_start-0xbff0462c>
  c8:	0b0d4201 	bleq	3508d4 <_start-0xbfcb772c>
  cc:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
  d0:	00000ecb 	andeq	r0, r0, fp, asr #29
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000000 	andeq	r0, r0, r0
  dc:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
  e0:	000008c8 	andeq	r0, r0, r8, asr #17
  e4:	8b080e42 	blhi	2039f4 <_start-0xbfe0460c>
  e8:	42018e02 	andmi	r8, r1, #2, 28
  ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  f0:	0d0c045e 	cfstrseq	mvf0, [ip, #-376]	; 0xfffffe88
  f4:	00000008 	andeq	r0, r0, r8
  f8:	00000030 	andeq	r0, r0, r0, lsr r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	c000937c 	andgt	r9, r0, ip, ror r3
 104:	0000004c 	andeq	r0, r0, ip, asr #32
 108:	810c0e42 	tsthi	ip, r2, asr #28
 10c:	83028203 	movwhi	r8, #8707	; 0x2203
 110:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
 114:	048e058b 	streq	r0, [lr], #1419	; 0x58b
 118:	100b0c42 	andne	r0, fp, r2, asr #24
 11c:	140d0c5a 	strne	r0, [sp], #-3162	; 0xfffff3a6
 120:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
 124:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
 128:	00000ec1 	andeq	r0, r0, r1, asr #29
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
 130:	00000000 	andeq	r0, r0, r0
 134:	c00093c8 	andgt	r9, r0, r8, asr #7
 138:	0000004c 	andeq	r0, r0, ip, asr #32
 13c:	80100e42 	andshi	r0, r0, r2, asr #28
 140:	82038104 	andhi	r8, r3, #4, 2
 144:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 148:	068b180e 	streq	r1, [fp], lr, lsl #16
 14c:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 150:	0c5a140b 	cfldrdeq	mvd1, [sl], {11}
 154:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 158:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
 15c:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
 160:	0000000e 	andeq	r0, r0, lr
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	c0009414 	andgt	r9, r0, r4, lsl r4
 180:	000001e8 	andeq	r0, r0, r8, ror #3
 184:	8b040e42 	blhi	103a94 <_start-0xbff0456c>
 188:	0b0d4201 	bleq	350994 <_start-0xbfcb766c>
 18c:	0d0dec02 	stceq	12, cr14, [sp, #-8]
 190:	000ecb42 	andeq	ip, lr, r2, asr #22
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000164 	andeq	r0, r0, r4, ror #2
 19c:	c00095fc 	strdgt	r9, [r0], -ip
 1a0:	00000060 	andeq	r0, r0, r0, rrx
 1a4:	8b080e42 	blhi	203ab4 <_start-0xbfe0454c>
 1a8:	42018e02 	andmi	r8, r1, #2, 28
 1ac:	6a040b0c 	bvs	102de4 <_start-0xbff0521c>
 1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000164 	andeq	r0, r0, r4, ror #2
 1bc:	c000965c 	andgt	r9, r0, ip, asr r6
 1c0:	00000048 	andeq	r0, r0, r8, asr #32
 1c4:	8b080e42 	blhi	203ad4 <_start-0xbfe0452c>
 1c8:	42018e02 	andmi	r8, r1, #2, 28
 1cc:	5e040b0c 	vmlapl.f64	d0, d4, d12
 1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000164 	andeq	r0, r0, r4, ror #2
 1dc:	c00096a4 	andgt	r9, r0, r4, lsr #13
 1e0:	0000004c 	andeq	r0, r0, ip, asr #32
 1e4:	8b040e42 	blhi	103af4 <_start-0xbff0450c>
 1e8:	0b0d4201 	bleq	3509f4 <_start-0xbfcb760c>
 1ec:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 1f0:	00000ecb 	andeq	r0, r0, fp, asr #29
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	000001f4 	strdeq	r0, [r0], -r4
 20c:	c00096f0 	strdgt	r9, [r0], -r0
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	8b040e42 	blhi	103b24 <_start-0xbff044dc>
 218:	0b0d4201 	bleq	350a24 <_start-0xbfcb75dc>
 21c:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 220:	00000ecb 	andeq	r0, r0, fp, asr #29
 224:	0000000c 	andeq	r0, r0, ip
 228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 22c:	7c020001 	stcvc	0, cr0, [r2], {1}
 230:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000224 	andeq	r0, r0, r4, lsr #4
 23c:	c0009708 	andgt	r9, r0, r8, lsl #14
 240:	00000070 	andeq	r0, r0, r0, ror r0
 244:	8b040e42 	blhi	103b54 <_start-0xbff044ac>
 248:	0b0d4201 	bleq	350a54 <_start-0xbfcb75ac>
 24c:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
 250:	00000ecb 	andeq	r0, r0, fp, asr #29
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000224 	andeq	r0, r0, r4, lsr #4
 25c:	c0009778 	andgt	r9, r0, r8, ror r7
 260:	000001d8 	ldrdeq	r0, [r0], -r8
 264:	8b040e42 	blhi	103b74 <_start-0xbff0448c>
 268:	0b0d4201 	bleq	350a74 <_start-0xbfcb758c>
 26c:	0d0de402 	cfstrseq	mvf14, [sp, #-8]
 270:	000ecb42 	andeq	ip, lr, r2, asr #22
 274:	00000018 	andeq	r0, r0, r8, lsl r0
 278:	00000224 	andeq	r0, r0, r4, lsr #4
 27c:	c0009950 	andgt	r9, r0, r0, asr r9
 280:	00000124 	andeq	r0, r0, r4, lsr #2
 284:	8b080e42 	blhi	203b94 <_start-0xbfe0446c>
 288:	42018e02 	andmi	r8, r1, #2, 28
 28c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	00000018 	andeq	r0, r0, r8, lsl r0
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	c0009a74 	andgt	r9, r0, r4, ror sl
 2ac:	00000014 	andeq	r0, r0, r4, lsl r0
 2b0:	8b080e42 	blhi	203bc0 <_start-0xbfe04440>
 2b4:	42018e02 	andmi	r8, r1, #2, 28
 2b8:	00040b0c 	andeq	r0, r4, ip, lsl #22
